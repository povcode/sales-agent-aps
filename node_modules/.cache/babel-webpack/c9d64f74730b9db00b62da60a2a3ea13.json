{"ast":null,"code":"import _createClass from \"/Users/prottasofgrosskofic/Documents/GitHub/sales-agent-site/aspro-sales-agent/blk-design-system-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/prottasofgrosskofic/Documents/GitHub/sales-agent-site/aspro-sales-agent/blk-design-system-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, ɵɵdefineInjectable, forwardRef, EventEmitter, Component, ElementRef, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Provides default values for Pagination and pager components\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nvar _c0 = function _c0(a0, a1) {\n  return {\n    \"pull-left\": a0,\n    \"float-left\": a1\n  };\n};\n\nvar _c1 = function _c1(a0, a1) {\n  return {\n    \"pull-right\": a0,\n    \"float-right\": a1\n  };\n};\n\nvar _c2 = function _c2(a0, a1) {\n  return {\n    disabled: a0,\n    currentPage: a1\n  };\n};\n\nfunction PaginationComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 11);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_1_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.selectPage(1, $event);\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    var _r11 = ɵngcc0.ɵɵreference(13);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r0.noPrevious() || ctx_r0.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.customFirstTemplate || _r11)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r0.noPrevious() || ctx_r0.disabled, ctx_r0.page));\n  }\n}\n\nfunction PaginationComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r18 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 14);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_2_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      var ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.selectPage(ctx_r17.page - 1, $event);\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n\n    var _r9 = ɵngcc0.ɵɵreference(11);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r1.noPrevious() || ctx_r1.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.customPreviousTemplate || _r9)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r1.noPrevious() || ctx_r1.disabled, ctx_r1.page));\n  }\n}\n\nvar _c3 = function _c3(a0, a1, a2) {\n  return {\n    disabled: a0,\n    $implicit: a1,\n    currentPage: a2\n  };\n};\n\nfunction PaginationComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r21 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 15);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_3_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r21);\n      var pg_r19 = ctx.$implicit;\n      var ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.selectPage(pg_r19.number, $event);\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var pg_r19 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n\n    var _r5 = ɵngcc0.ɵɵreference(7);\n\n    ɵngcc0.ɵɵclassProp(\"active\", pg_r19.active)(\"disabled\", ctx_r2.disabled && !pg_r19.active);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.customPageTemplate || _r5)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(6, _c3, ctx_r2.disabled, pg_r19, ctx_r2.page));\n  }\n}\n\nfunction PaginationComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r23 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 16);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_4_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      var ctx_r22 = ɵngcc0.ɵɵnextContext();\n      return ctx_r22.selectPage(ctx_r22.page + 1, $event);\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n\n    var _r7 = ɵngcc0.ɵɵreference(9);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r3.noNext() || ctx_r3.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.customNextTemplate || _r7)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r3.noNext() || ctx_r3.disabled, ctx_r3.page));\n  }\n}\n\nfunction PaginationComponent_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r25 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 17);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_5_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r25);\n      var ctx_r24 = ɵngcc0.ɵɵnextContext();\n      return ctx_r24.selectPage(ctx_r24.totalPages, $event);\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n\n    var _r13 = ɵngcc0.ɵɵreference(15);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r4.noNext() || ctx_r4.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.customLastTemplate || _r13)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r4.noNext() || ctx_r4.disabled, ctx_r4.page));\n  }\n}\n\nfunction PaginationComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var page_r26 = ctx.$implicit;\n    ɵngcc0.ɵɵtextInterpolate(page_r26.text);\n  }\n}\n\nfunction PaginationComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r8.getText(\"next\"));\n  }\n}\n\nfunction PaginationComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r10.getText(\"previous\"));\n  }\n}\n\nfunction PaginationComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r12 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r12.getText(\"first\"));\n  }\n}\n\nfunction PaginationComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r14 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r14.getText(\"last\"));\n  }\n}\n\nvar PaginationConfig = /*#__PURE__*/_createClass(function PaginationConfig() {\n  _classCallCheck(this, PaginationConfig);\n\n  this.main = {\n    maxSize: void 0,\n    itemsPerPage: 10,\n    boundaryLinks: false,\n    directionLinks: true,\n    firstText: 'First',\n    previousText: 'Previous',\n    nextText: 'Next',\n    lastText: 'Last',\n    pageBtnClass: '',\n    rotate: true\n  };\n  this.pager = {\n    itemsPerPage: 15,\n    previousText: '« Previous',\n    nextText: 'Next »',\n    pageBtnClass: '',\n    align: true\n  };\n});\n\nPaginationConfig.ɵfac = function PaginationConfig_Factory(t) {\n  return new (t || PaginationConfig)();\n};\n/** @nocollapse */\n\n\nPaginationConfig.ɵprov = ɵɵdefineInjectable({\n  factory: function PaginationConfig_Factory() {\n    return new PaginationConfig();\n  },\n  token: PaginationConfig,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PaginationConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  PaginationConfig.prototype.main;\n  /** @type {?} */\n\n  PaginationConfig.prototype.pager;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar PAGER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return PagerComponent;\n  }),\n  multi: true\n};\n\nvar PagerComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} paginationConfig\n   * @param {?} changeDetection\n   */\n  function PagerComponent(elementRef, paginationConfig, changeDetection) {\n    _classCallCheck(this, PagerComponent);\n\n    this.elementRef = elementRef;\n    this.changeDetection = changeDetection;\n    /**\n     * fired when total pages count changes, $event:number equals to total pages count\n     */\n\n    this.numPages = new EventEmitter();\n    /**\n     * fired when page was changed, $event:{page, itemsPerPage} equals to\n     * object with current page index and number of items per page\n     */\n\n    this.pageChanged = new EventEmitter();\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n    this.inited = false;\n    this._page = 1;\n    this.elementRef = elementRef;\n\n    if (!this.config) {\n      this.configureOptions(Object.assign({}, paginationConfig.main, paginationConfig.pager));\n    }\n  }\n  /**\n   * maximum number of items per page. If value less than 1 will display all items on one page\n   * @return {?}\n   */\n\n\n  _createClass(PagerComponent, [{\n    key: \"itemsPerPage\",\n    get: function get() {\n      return this._itemsPerPage;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._itemsPerPage = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * total number of items in all pages\n     * @return {?}\n     */\n\n  }, {\n    key: \"totalItems\",\n    get: function get() {\n      return this._totalItems;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._totalItems = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"totalPages\",\n    get: function get() {\n      return this._totalPages;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._totalPages = v;\n      this.numPages.emit(v);\n\n      if (this.inited) {\n        this.selectPage(this.page);\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"page\",\n    get:\n    /**\n     * @return {?}\n     */\n    function get() {\n      return this._page;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var _previous = this._page;\n      this._page = value > this.totalPages ? this.totalPages : value || 1;\n      this.changeDetection.markForCheck();\n\n      if (_previous === this._page || typeof _previous === 'undefined') {\n        return;\n      }\n\n      this.pageChanged.emit({\n        page: this._page,\n        itemsPerPage: this.itemsPerPage\n      });\n    }\n  }, {\n    key: \"configureOptions\",\n    value: function configureOptions(config) {\n      this.config = Object.assign({}, config);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (typeof window !== 'undefined') {\n        this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n      } // watch for maxSize\n\n\n      this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n      this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n      this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : this.config.boundaryLinks;\n      this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : this.config.directionLinks;\n      this.pageBtnClass = typeof this.pageBtnClass !== 'undefined' ? this.pageBtnClass : this.config.pageBtnClass; // base class\n\n      this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : this.config.itemsPerPage;\n      this.totalPages = this.calculateTotalPages(); // this class\n\n      this.pages = this.getPages(this.page, this.totalPages);\n      this.inited = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.page = value;\n      this.pages = this.getPages(this.page, this.totalPages);\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      // tslint:disable-next-line:no-any\n      return (\n        /** @type {?} */\n        this[\"\".concat(key, \"Text\")] ||\n        /** @type {?} */\n        this.config[\"\".concat(key, \"Text\")]\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"noPrevious\",\n    value: function noPrevious() {\n      return this.page === 1;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"noNext\",\n    value: function noNext() {\n      return this.page === this.totalPages;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} page\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectPage\",\n    value: function selectPage(page, event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!this.disabled) {\n        if (event && event.target) {\n          // tslint:disable-next-line:no-any\n\n          /** @type {?} */\n          var target = event.target;\n          target.blur();\n        }\n\n        this.writeValue(page);\n        this.onChange(this.page);\n      }\n    } // Create page object used in template\n\n    /**\n     * @protected\n     * @param {?} num\n     * @param {?} text\n     * @param {?} active\n     * @return {?}\n     */\n\n  }, {\n    key: \"makePage\",\n    value: function makePage(num, text, active) {\n      return {\n        text: text,\n        number: num,\n        active: active\n      };\n    }\n    /**\n     * @protected\n     * @param {?} currentPage\n     * @param {?} totalPages\n     * @return {?}\n     */\n\n  }, {\n    key: \"getPages\",\n    value: function getPages(currentPage, totalPages) {\n      /** @type {?} */\n      var pages = []; // Default page limits\n\n      /** @type {?} */\n\n      var startPage = 1;\n      /** @type {?} */\n\n      var endPage = totalPages;\n      /** @type {?} */\n\n      var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages; // recompute if maxSize\n\n      if (isMaxSized) {\n        if (this.rotate) {\n          // Current page is displayed in the middle of the visible ones\n          startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n          endPage = startPage + this.maxSize - 1; // Adjust if limit is exceeded\n\n          if (endPage > totalPages) {\n            endPage = totalPages;\n            startPage = endPage - this.maxSize + 1;\n          }\n        } else {\n          // Visible pages are paginated with maxSize\n          startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1; // Adjust last page if limit is exceeded\n\n          endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n        }\n      } // Add page number links\n\n\n      for (var num = startPage; num <= endPage; num++) {\n        /** @type {?} */\n        var page = this.makePage(num, num.toString(), num === currentPage);\n        pages.push(page);\n      } // Add links to move between page sets\n\n\n      if (isMaxSized && !this.rotate) {\n        if (startPage > 1) {\n          /** @type {?} */\n          var previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (endPage < totalPages) {\n          /** @type {?} */\n          var nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n      }\n\n      return pages;\n    } // base class\n\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"calculateTotalPages\",\n    value: function calculateTotalPages() {\n      /** @type {?} */\n      var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);\n      return Math.max(totalPages || 0, 1);\n    }\n  }]);\n\n  return PagerComponent;\n}();\n\nPagerComponent.ɵfac = function PagerComponent_Factory(t) {\n  return new (t || PagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nPagerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PagerComponent,\n  selectors: [[\"pager\"]],\n  inputs: {\n    itemsPerPage: \"itemsPerPage\",\n    totalItems: \"totalItems\",\n    maxSize: \"maxSize\",\n    rotate: \"rotate\",\n    boundaryLinks: \"boundaryLinks\",\n    directionLinks: \"directionLinks\",\n    pageBtnClass: \"pageBtnClass\",\n    align: \"align\",\n    firstText: \"firstText\",\n    previousText: \"previousText\",\n    nextText: \"nextText\",\n    lastText: \"lastText\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    numPages: \"numPages\",\n    pageChanged: \"pageChanged\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([PAGER_CONTROL_VALUE_ACCESSOR])],\n  decls: 7,\n  vars: 24,\n  consts: [[1, \"pager\"], [3, \"ngClass\"], [\"href\", \"\", 3, \"click\"]],\n  template: function PagerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"li\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"a\", 2);\n      ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_2_listener($event) {\n        return ctx.selectPage(ctx.page - 1, $event);\n      });\n      ɵngcc0.ɵɵtext(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"li\", 1);\n      ɵngcc0.ɵɵelementStart(5, \"a\", 2);\n      ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_5_listener($event) {\n        return ctx.selectPage(ctx.page + 1, $event);\n      });\n      ɵngcc0.ɵɵtext(6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n      ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noPrevious())(\"previous\", ctx.align);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(18, _c0, ctx.align, ctx.align));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"previous\"));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n      ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noNext())(\"next\", ctx.align);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(21, _c1, ctx.align, ctx.align));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"next\"));\n    }\n  },\n  directives: [ɵngcc1.NgClass],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nPagerComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: PaginationConfig\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nPagerComponent.propDecorators = {\n  align: [{\n    type: Input\n  }],\n  maxSize: [{\n    type: Input\n  }],\n  boundaryLinks: [{\n    type: Input\n  }],\n  directionLinks: [{\n    type: Input\n  }],\n  firstText: [{\n    type: Input\n  }],\n  previousText: [{\n    type: Input\n  }],\n  nextText: [{\n    type: Input\n  }],\n  lastText: [{\n    type: Input\n  }],\n  rotate: [{\n    type: Input\n  }],\n  pageBtnClass: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  numPages: [{\n    type: Output\n  }],\n  pageChanged: [{\n    type: Output\n  }],\n  itemsPerPage: [{\n    type: Input\n  }],\n  totalItems: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PagerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'pager',\n      template: \"<ul class=\\\"pager\\\">\\n  <li [class.disabled]=\\\"noPrevious()\\\" [class.previous]=\\\"align\\\"\\n      [ngClass]=\\\"{'pull-left': align, 'float-left': align}\\\"\\n      class=\\\"{{ pageBtnClass }}\\\">\\n    <a href (click)=\\\"selectPage(page - 1, $event)\\\">{{ getText('previous') }}</a>\\n  </li>\\n  <li [class.disabled]=\\\"noNext()\\\" [class.next]=\\\"align\\\"\\n      [ngClass]=\\\"{'pull-right': align, 'float-right': align}\\\"\\n      class=\\\"{{ pageBtnClass }}\\\">\\n    <a href (click)=\\\"selectPage(page + 1, $event)\\\">{{ getText('next') }}</a>\\n  </li>\\n</ul>\\n\",\n      providers: [PAGER_CONTROL_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: PaginationConfig\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    numPages: [{\n      type: Output\n    }],\n    pageChanged: [{\n      type: Output\n    }],\n    itemsPerPage: [{\n      type: Input\n    }],\n    totalItems: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    rotate: [{\n      type: Input\n    }],\n    boundaryLinks: [{\n      type: Input\n    }],\n    directionLinks: [{\n      type: Input\n    }],\n    pageBtnClass: [{\n      type: Input\n    }],\n    align: [{\n      type: Input\n    }],\n    firstText: [{\n      type: Input\n    }],\n    previousText: [{\n      type: Input\n    }],\n    nextText: [{\n      type: Input\n    }],\n    lastText: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  PagerComponent.prototype.config;\n  /**\n   * if `true` aligns each link to the sides of pager\n   * @type {?}\n   */\n\n  PagerComponent.prototype.align;\n  /**\n   * limit number for page links in pager\n   * @type {?}\n   */\n\n  PagerComponent.prototype.maxSize;\n  /**\n   * if false first and last buttons will be hidden\n   * @type {?}\n   */\n\n  PagerComponent.prototype.boundaryLinks;\n  /**\n   * if false previous and next buttons will be hidden\n   * @type {?}\n   */\n\n  PagerComponent.prototype.directionLinks;\n  /**\n   * first button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.firstText;\n  /**\n   * previous button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.previousText;\n  /**\n   * next button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.nextText;\n  /**\n   * last button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.lastText;\n  /**\n   * if true current page will in the middle of pages list\n   * @type {?}\n   */\n\n  PagerComponent.prototype.rotate;\n  /**\n   * add class to <code><li\\></code>\n   * @type {?}\n   */\n\n  PagerComponent.prototype.pageBtnClass;\n  /**\n   * if true pagination component will be disabled\n   * @type {?}\n   */\n\n  PagerComponent.prototype.disabled;\n  /**\n   * fired when total pages count changes, $event:number equals to total pages count\n   * @type {?}\n   */\n\n  PagerComponent.prototype.numPages;\n  /**\n   * fired when page was changed, $event:{page, itemsPerPage} equals to\n   * object with current page index and number of items per page\n   * @type {?}\n   */\n\n  PagerComponent.prototype.pageChanged;\n  /** @type {?} */\n\n  PagerComponent.prototype.onChange;\n  /** @type {?} */\n\n  PagerComponent.prototype.onTouched;\n  /** @type {?} */\n\n  PagerComponent.prototype.classMap;\n  /** @type {?} */\n\n  PagerComponent.prototype.pages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._itemsPerPage;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._totalItems;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._totalPages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype.inited;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._page;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PagerComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PagerComponent.prototype.changeDetection;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction PageChangedEvent() {}\n\nif (false) {\n  /** @type {?} */\n  PageChangedEvent.prototype.itemsPerPage;\n  /** @type {?} */\n\n  PageChangedEvent.prototype.page;\n}\n/** @type {?} */\n\n\nvar PAGINATION_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return PaginationComponent;\n  }),\n  multi: true\n};\n\nvar PaginationComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} paginationConfig\n   * @param {?} changeDetection\n   */\n  function PaginationComponent(elementRef, paginationConfig, changeDetection) {\n    _classCallCheck(this, PaginationComponent);\n\n    this.elementRef = elementRef;\n    this.changeDetection = changeDetection;\n    /**\n     * fired when total pages count changes, $event:number equals to total pages count\n     */\n\n    this.numPages = new EventEmitter();\n    /**\n     * fired when page was changed, $event:{page, itemsPerPage} equals to object\n     * with current page index and number of items per page\n     */\n\n    this.pageChanged = new EventEmitter();\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n    this.inited = false;\n    this._page = 1;\n    this.elementRef = elementRef;\n\n    if (!this.config) {\n      this.configureOptions(paginationConfig.main);\n    }\n  }\n  /**\n   * maximum number of items per page. If value less than 1 will display all items on one page\n   * @return {?}\n   */\n\n\n  _createClass(PaginationComponent, [{\n    key: \"itemsPerPage\",\n    get: function get() {\n      return this._itemsPerPage;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._itemsPerPage = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * total number of items in all pages\n     * @return {?}\n     */\n\n  }, {\n    key: \"totalItems\",\n    get: function get() {\n      return this._totalItems;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._totalItems = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"totalPages\",\n    get: function get() {\n      return this._totalPages;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._totalPages = v;\n      this.numPages.emit(v);\n\n      if (this.inited) {\n        this.selectPage(this.page);\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"page\",\n    get:\n    /**\n     * @return {?}\n     */\n    function get() {\n      return this._page;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var _previous = this._page;\n      this._page = value > this.totalPages ? this.totalPages : value || 1;\n      this.changeDetection.markForCheck();\n\n      if (_previous === this._page || typeof _previous === 'undefined') {\n        return;\n      }\n\n      this.pageChanged.emit({\n        page: this._page,\n        itemsPerPage: this.itemsPerPage\n      });\n    }\n  }, {\n    key: \"configureOptions\",\n    value: function configureOptions(config) {\n      this.config = Object.assign({}, config);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (typeof window !== 'undefined') {\n        this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n      } // watch for maxSize\n\n\n      this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n      this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n      this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : this.config.boundaryLinks;\n      this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : this.config.directionLinks;\n      this.pageBtnClass = typeof this.pageBtnClass !== 'undefined' ? this.pageBtnClass : this.config.pageBtnClass; // base class\n\n      this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : this.config.itemsPerPage;\n      this.totalPages = this.calculateTotalPages(); // this class\n\n      this.pages = this.getPages(this.page, this.totalPages);\n      this.inited = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.page = value;\n      this.pages = this.getPages(this.page, this.totalPages);\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      // tslint:disable-next-line:no-any\n      return (\n        /** @type {?} */\n        this[\"\".concat(key, \"Text\")] ||\n        /** @type {?} */\n        this.config[\"\".concat(key, \"Text\")]\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"noPrevious\",\n    value: function noPrevious() {\n      return this.page === 1;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"noNext\",\n    value: function noNext() {\n      return this.page === this.totalPages;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} page\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectPage\",\n    value: function selectPage(page, event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!this.disabled) {\n        if (event && event.target) {\n          // tslint:disable-next-line:no-any\n\n          /** @type {?} */\n          var target = event.target;\n          target.blur();\n        }\n\n        this.writeValue(page);\n        this.onChange(this.page);\n      }\n    } // Create page object used in template\n\n    /**\n     * @protected\n     * @param {?} num\n     * @param {?} text\n     * @param {?} active\n     * @return {?}\n     */\n\n  }, {\n    key: \"makePage\",\n    value: function makePage(num, text, active) {\n      return {\n        text: text,\n        number: num,\n        active: active\n      };\n    }\n    /**\n     * @protected\n     * @param {?} currentPage\n     * @param {?} totalPages\n     * @return {?}\n     */\n\n  }, {\n    key: \"getPages\",\n    value: function getPages(currentPage, totalPages) {\n      /** @type {?} */\n      var pages = []; // Default page limits\n\n      /** @type {?} */\n\n      var startPage = 1;\n      /** @type {?} */\n\n      var endPage = totalPages;\n      /** @type {?} */\n\n      var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages; // recompute if maxSize\n\n      if (isMaxSized) {\n        if (this.rotate) {\n          // Current page is displayed in the middle of the visible ones\n          startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n          endPage = startPage + this.maxSize - 1; // Adjust if limit is exceeded\n\n          if (endPage > totalPages) {\n            endPage = totalPages;\n            startPage = endPage - this.maxSize + 1;\n          }\n        } else {\n          // Visible pages are paginated with maxSize\n          startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1; // Adjust last page if limit is exceeded\n\n          endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n        }\n      } // Add page number links\n\n\n      for (var num = startPage; num <= endPage; num++) {\n        /** @type {?} */\n        var page = this.makePage(num, num.toString(), num === currentPage);\n        pages.push(page);\n      } // Add links to move between page sets\n\n\n      if (isMaxSized && !this.rotate) {\n        if (startPage > 1) {\n          /** @type {?} */\n          var previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (endPage < totalPages) {\n          /** @type {?} */\n          var nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n      }\n\n      return pages;\n    } // base class\n\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"calculateTotalPages\",\n    value: function calculateTotalPages() {\n      /** @type {?} */\n      var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);\n      return Math.max(totalPages || 0, 1);\n    }\n  }]);\n\n  return PaginationComponent;\n}();\n\nPaginationComponent.ɵfac = function PaginationComponent_Factory(t) {\n  return new (t || PaginationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nPaginationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PaginationComponent,\n  selectors: [[\"pagination\"]],\n  inputs: {\n    itemsPerPage: \"itemsPerPage\",\n    totalItems: \"totalItems\",\n    maxSize: \"maxSize\",\n    rotate: \"rotate\",\n    boundaryLinks: \"boundaryLinks\",\n    directionLinks: \"directionLinks\",\n    pageBtnClass: \"pageBtnClass\",\n    align: \"align\",\n    firstText: \"firstText\",\n    previousText: \"previousText\",\n    nextText: \"nextText\",\n    lastText: \"lastText\",\n    disabled: \"disabled\",\n    customPageTemplate: \"customPageTemplate\",\n    customNextTemplate: \"customNextTemplate\",\n    customPreviousTemplate: \"customPreviousTemplate\",\n    customFirstTemplate: \"customFirstTemplate\",\n    customLastTemplate: \"customLastTemplate\"\n  },\n  outputs: {\n    numPages: \"numPages\",\n    pageChanged: \"pageChanged\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([PAGINATION_CONTROL_VALUE_ACCESSOR])],\n  decls: 16,\n  vars: 6,\n  consts: [[1, \"pagination\", 3, \"ngClass\"], [\"class\", \"pagination-first page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-prev page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-page page-item\", 3, \"active\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"pagination-next page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-last page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"defaultPageTemplate\", \"\"], [\"defaultNextTemplate\", \"\"], [\"defaultPreviousTemplate\", \"\"], [\"defaultFirstTemplate\", \"\"], [\"defaultLastTemplate\", \"\"], [1, \"pagination-first\", \"page-item\"], [\"href\", \"\", 1, \"page-link\", 3, \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"pagination-prev\", \"page-item\"], [1, \"pagination-page\", \"page-item\"], [1, \"pagination-next\", \"page-item\"], [1, \"pagination-last\", \"page-item\"]],\n  template: function PaginationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n      ɵngcc0.ɵɵtemplate(1, PaginationComponent_li_1_Template, 3, 7, \"li\", 1);\n      ɵngcc0.ɵɵtemplate(2, PaginationComponent_li_2_Template, 3, 7, \"li\", 2);\n      ɵngcc0.ɵɵtemplate(3, PaginationComponent_li_3_Template, 3, 10, \"li\", 3);\n      ɵngcc0.ɵɵtemplate(4, PaginationComponent_li_4_Template, 3, 7, \"li\", 4);\n      ɵngcc0.ɵɵtemplate(5, PaginationComponent_li_5_Template, 3, 7, \"li\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, PaginationComponent_ng_template_6_Template, 1, 1, \"ng-template\", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(8, PaginationComponent_ng_template_8_Template, 1, 1, \"ng-template\", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(10, PaginationComponent_ng_template_10_Template, 1, 1, \"ng-template\", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(12, PaginationComponent_ng_template_12_Template, 1, 1, \"ng-template\", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(14, PaginationComponent_ng_template_14_Template, 1, 1, \"ng-template\", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.classMap);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.boundaryLinks);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.directionLinks);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.pages);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.directionLinks);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.boundaryLinks);\n    }\n  },\n  directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nPaginationComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: PaginationConfig\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nPaginationComponent.propDecorators = {\n  align: [{\n    type: Input\n  }],\n  maxSize: [{\n    type: Input\n  }],\n  boundaryLinks: [{\n    type: Input\n  }],\n  directionLinks: [{\n    type: Input\n  }],\n  firstText: [{\n    type: Input\n  }],\n  previousText: [{\n    type: Input\n  }],\n  nextText: [{\n    type: Input\n  }],\n  lastText: [{\n    type: Input\n  }],\n  rotate: [{\n    type: Input\n  }],\n  pageBtnClass: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  customPageTemplate: [{\n    type: Input\n  }],\n  customNextTemplate: [{\n    type: Input\n  }],\n  customPreviousTemplate: [{\n    type: Input\n  }],\n  customFirstTemplate: [{\n    type: Input\n  }],\n  customLastTemplate: [{\n    type: Input\n  }],\n  numPages: [{\n    type: Output\n  }],\n  pageChanged: [{\n    type: Output\n  }],\n  itemsPerPage: [{\n    type: Input\n  }],\n  totalItems: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PaginationComponent, [{\n    type: Component,\n    args: [{\n      selector: 'pagination',\n      template: \"<ul class=\\\"pagination\\\" [ngClass]=\\\"classMap\\\">\\n  <li class=\\\"pagination-first page-item\\\"\\n      *ngIf=\\\"boundaryLinks\\\"\\n      [class.disabled]=\\\"noPrevious() || disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(1, $event)\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"customFirstTemplate || defaultFirstTemplate\\\"\\n                   [ngTemplateOutletContext]=\\\"{disabled: noPrevious() || disabled, currentPage: page}\\\">\\n      </ng-container>\\n    </a>\\n  </li>\\n\\n  <li class=\\\"pagination-prev page-item\\\"\\n      *ngIf=\\\"directionLinks\\\"\\n      [class.disabled]=\\\"noPrevious() || disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(page - 1, $event)\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"customPreviousTemplate || defaultPreviousTemplate\\\"\\n                   [ngTemplateOutletContext]=\\\"{disabled: noPrevious() || disabled, currentPage: page}\\\">\\n      </ng-container>\\n    </a>\\n  </li>\\n\\n  <li *ngFor=\\\"let pg of pages\\\"\\n      [class.active]=\\\"pg.active\\\"\\n      [class.disabled]=\\\"disabled && !pg.active\\\"\\n      class=\\\"pagination-page page-item\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(pg.number, $event)\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"customPageTemplate || defaultPageTemplate\\\"\\n                   [ngTemplateOutletContext]=\\\"{disabled: disabled, $implicit: pg, currentPage: page}\\\">\\n      </ng-container>\\n    </a>\\n  </li>\\n\\n  <li class=\\\"pagination-next page-item\\\"\\n      *ngIf=\\\"directionLinks\\\"\\n      [class.disabled]=\\\"noNext() || disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(page + 1, $event)\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"customNextTemplate || defaultNextTemplate\\\"\\n                   [ngTemplateOutletContext]=\\\"{disabled: noNext() || disabled, currentPage: page}\\\">\\n      </ng-container>\\n    </a>\\n  </li>\\n\\n  <li class=\\\"pagination-last page-item\\\"\\n      *ngIf=\\\"boundaryLinks\\\"\\n      [class.disabled]=\\\"noNext() || disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(totalPages, $event)\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"customLastTemplate || defaultLastTemplate\\\"\\n                   [ngTemplateOutletContext]=\\\"{disabled: noNext() || disabled, currentPage: page}\\\">\\n      </ng-container>\\n    </a>\\n  </li>\\n</ul>\\n\\n<ng-template #defaultPageTemplate let-page>{{ page.text }}</ng-template>\\n\\n<ng-template #defaultNextTemplate>{{ getText('next') }}</ng-template>\\n\\n<ng-template #defaultPreviousTemplate>{{ getText('previous') }}</ng-template>\\n\\n<ng-template #defaultFirstTemplate>{{ getText('first') }}</ng-template>\\n\\n<ng-template #defaultLastTemplate>{{ getText('last') }}</ng-template>\\n\",\n      providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: PaginationConfig\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    numPages: [{\n      type: Output\n    }],\n    pageChanged: [{\n      type: Output\n    }],\n    itemsPerPage: [{\n      type: Input\n    }],\n    totalItems: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    rotate: [{\n      type: Input\n    }],\n    boundaryLinks: [{\n      type: Input\n    }],\n    directionLinks: [{\n      type: Input\n    }],\n    pageBtnClass: [{\n      type: Input\n    }],\n    align: [{\n      type: Input\n    }],\n    firstText: [{\n      type: Input\n    }],\n    previousText: [{\n      type: Input\n    }],\n    nextText: [{\n      type: Input\n    }],\n    lastText: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    customPageTemplate: [{\n      type: Input\n    }],\n    customNextTemplate: [{\n      type: Input\n    }],\n    customPreviousTemplate: [{\n      type: Input\n    }],\n    customFirstTemplate: [{\n      type: Input\n    }],\n    customLastTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  PaginationComponent.prototype.config;\n  /**\n   * if `true` aligns each link to the sides of pager\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.align;\n  /**\n   * limit number for page links in pager\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.maxSize;\n  /**\n   * if false first and last buttons will be hidden\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.boundaryLinks;\n  /**\n   * if false previous and next buttons will be hidden\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.directionLinks;\n  /**\n   * first button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.firstText;\n  /**\n   * previous button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.previousText;\n  /**\n   * next button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.nextText;\n  /**\n   * last button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.lastText;\n  /**\n   * if true current page will in the middle of pages list\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.rotate;\n  /**\n   * add class to <code><li\\></code>\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.pageBtnClass;\n  /**\n   * if true pagination component will be disabled\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.disabled;\n  /**\n   * custom template for page link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customPageTemplate;\n  /**\n   * custom template for next link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customNextTemplate;\n  /**\n   * custom template for previous link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customPreviousTemplate;\n  /**\n   * custom template for first link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customFirstTemplate;\n  /**\n   * custom template for last link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customLastTemplate;\n  /**\n   * fired when total pages count changes, $event:number equals to total pages count\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.numPages;\n  /**\n   * fired when page was changed, $event:{page, itemsPerPage} equals to object\n   * with current page index and number of items per page\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.pageChanged;\n  /** @type {?} */\n\n  PaginationComponent.prototype.onChange;\n  /** @type {?} */\n\n  PaginationComponent.prototype.onTouched;\n  /** @type {?} */\n\n  PaginationComponent.prototype.classMap;\n  /** @type {?} */\n\n  PaginationComponent.prototype.pages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._itemsPerPage;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._totalItems;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._totalPages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype.inited;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._page;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PaginationComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PaginationComponent.prototype.changeDetection;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar PaginationModule = /*#__PURE__*/function () {\n  function PaginationModule() {\n    _classCallCheck(this, PaginationModule);\n  }\n\n  _createClass(PaginationModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @return {?}\n     */\n    function forRoot() {\n      return {\n        ngModule: PaginationModule,\n        providers: []\n      };\n    }\n  }]);\n\n  return PaginationModule;\n}();\n\nPaginationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PaginationModule\n});\nPaginationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PaginationModule_Factory(t) {\n    return new (t || PaginationModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PaginationModule, {\n    declarations: function declarations() {\n      return [PagerComponent, PaginationComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [PagerComponent, PaginationComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PaginationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [PagerComponent, PaginationComponent],\n      exports: [PagerComponent, PaginationComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { PagerComponent, PaginationComponent, PaginationConfig, PaginationModule, PAGER_CONTROL_VALUE_ACCESSOR as ɵa, PAGINATION_CONTROL_VALUE_ACCESSOR as ɵb };","map":{"version":3,"sources":["ngx-bootstrap/pagination/pagination.config.ts","ngx-bootstrap/pagination/pager.component.ts","ngx-bootstrap/pagination/pagination.component.ts","ngx-bootstrap/pagination/pagination.module.ts"],"names":[],"mappings":"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","sourcesContent":["// todo: split\nimport { Injectable } from '@angular/core';\n\nimport { ConfigModel, PagerModel } from './models';\n\n/** Provides default values for Pagination and pager components */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaginationConfig {\n  main: ConfigModel = {\n    maxSize: void 0,\n    itemsPerPage: 10,\n    boundaryLinks: false,\n    directionLinks: true,\n    firstText: 'First',\n    previousText: 'Previous',\n    nextText: 'Next',\n    lastText: 'Last',\n    pageBtnClass: '',\n    rotate: true\n  };\n  pager: PagerModel = {\n    itemsPerPage: 15,\n    previousText: '« Previous',\n    nextText: 'Next »',\n    pageBtnClass: '',\n    align: true\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { PageChangedEvent } from './pagination.component';\nimport { PaginationConfig } from './pagination.config';\n\nimport { ConfigModel, PagesModel } from './models';\n\nexport const PAGER_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => PagerComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pager',\n  templateUrl: './pager.component.html',\n  providers: [PAGER_CONTROL_VALUE_ACCESSOR]\n})\nexport class PagerComponent implements ControlValueAccessor, OnInit {\n  config: ConfigModel;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align: boolean;\n  /** limit number for page links in pager */\n  @Input() maxSize: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks: boolean;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks: boolean;\n  // labels\n  /** first button text */\n  @Input() firstText: string;\n  /** previous button text */\n  @Input() previousText: string;\n  /** next button text */\n  @Input() nextText: string;\n  /** last button text */\n  @Input() lastText: string;\n  /** if true current page will in the middle of pages list */\n  @Input() rotate: boolean;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass: string;\n\n  /** if true pagination component will be disabled */\n  @Input() disabled: boolean;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to\n   * object with current page index and number of items per page\n   */\n  @Output()\n  pageChanged: EventEmitter<PageChangedEvent> = new EventEmitter<PageChangedEvent>();\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  classMap: string;\n  pages: PagesModel[];\n\n  protected _itemsPerPage: number;\n  protected _totalItems: number;\n  protected _totalPages: number;\n  protected inited = false;\n  protected _page = 1;\n\n  constructor(private elementRef: ElementRef,\n              paginationConfig: PaginationConfig,\n              private changeDetection: ChangeDetectorRef) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(\n        Object.assign({}, paginationConfig.main, paginationConfig.pager)\n      );\n    }\n  }\n\n  configureOptions(config: ConfigModel): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n    // watch for maxSize\n    this.maxSize =\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n    this.rotate =\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n    this.boundaryLinks =\n      typeof this.boundaryLinks !== 'undefined'\n        ? this.boundaryLinks\n        : this.config.boundaryLinks;\n    this.directionLinks =\n      typeof this.directionLinks !== 'undefined'\n        ? this.directionLinks\n        : this.config.directionLinks;\n    this.pageBtnClass =\n      typeof this.pageBtnClass !== 'undefined'\n        ? this.pageBtnClass\n        : this.config.pageBtnClass;\n\n    // base class\n    this.itemsPerPage =\n      typeof this.itemsPerPage !== 'undefined'\n        ? this.itemsPerPage\n        : this.config.itemsPerPage;\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // tslint:disable-next-line:no-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // tslint:disable-next-line:no-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(num: number,\n                     text: string,\n                     active: boolean): { number: number; text: string; active: boolean } {\n    return {text, number: num, active};\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider, TemplateRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { PaginationConfig } from './pagination.config';\nimport { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';\n\nexport interface PageChangedEvent {\n  itemsPerPage: number;\n  page: number;\n}\n\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => PaginationComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pagination',\n  templateUrl: './pagination.component.html',\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n})\nexport class PaginationComponent implements ControlValueAccessor, OnInit {\n  config: ConfigModel;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align: boolean;\n  /** limit number for page links in pager */\n  @Input() maxSize: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks: boolean;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks: boolean;\n  // labels\n  /** first button text */\n  @Input() firstText: string;\n  /** previous button text */\n  @Input() previousText: string;\n  /** next button text */\n  @Input() nextText: string;\n  /** last button text */\n  @Input() lastText: string;\n  /** if true current page will in the middle of pages list */\n  @Input() rotate: boolean;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass: string;\n  /** if true pagination component will be disabled */\n  @Input() disabled: boolean;\n  /** custom template for page link */\n  @Input() customPageTemplate: TemplateRef<PaginationNumberLinkContext>;\n  /** custom template for next link */\n  @Input() customNextTemplate: TemplateRef<PaginationLinkContext>;\n  /** custom template for previous link */\n  @Input() customPreviousTemplate: TemplateRef<PaginationLinkContext>;\n  /** custom template for first link */\n  @Input() customFirstTemplate: TemplateRef<PaginationLinkContext>;\n  /** custom template for last link */\n  @Input() customLastTemplate: TemplateRef<PaginationLinkContext>;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to object\n   * with current page index and number of items per page\n   */\n  @Output()\n  pageChanged = new EventEmitter<PageChangedEvent>();\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  classMap: string;\n  pages: PagesModel[];\n\n  protected _itemsPerPage: number;\n  protected _totalItems: number;\n  protected _totalPages: number;\n  protected inited = false;\n  protected _page = 1;\n\n  constructor(\n    private elementRef: ElementRef,\n    paginationConfig: PaginationConfig,\n    private changeDetection: ChangeDetectorRef\n  ) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(paginationConfig.main);\n    }\n  }\n\n  configureOptions(config: ConfigModel): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n    // watch for maxSize\n    this.maxSize =\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n    this.rotate =\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n    this.boundaryLinks =\n      typeof this.boundaryLinks !== 'undefined'\n        ? this.boundaryLinks\n        : this.config.boundaryLinks;\n    this.directionLinks =\n      typeof this.directionLinks !== 'undefined'\n        ? this.directionLinks\n        : this.config.directionLinks;\n    this.pageBtnClass =\n      typeof this.pageBtnClass !== 'undefined'\n        ? this.pageBtnClass\n        : this.config.pageBtnClass;\n\n    // base class\n    this.itemsPerPage =\n      typeof this.itemsPerPage !== 'undefined'\n        ? this.itemsPerPage\n        : this.config.itemsPerPage;\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // tslint:disable-next-line:no-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // tslint:disable-next-line:no-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(\n    num: number,\n    text: string,\n    active: boolean\n  ): { number: number; text: string; active: boolean } {\n    return { text, number: num, active };\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n// tslint:disable-next-line:max-file-line-count\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { PagerComponent } from './pager.component';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PagerComponent, PaginationComponent],\n  exports: [PagerComponent, PaginationComponent]\n})\nexport class PaginationModule {\n  static forRoot(): ModuleWithProviders<PaginationModule> {\n    return { ngModule: PaginationModule, providers: [] };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}