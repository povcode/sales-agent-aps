{"ast":null,"code":"import _createClass from \"/Users/prottasofgrosskofic/Documents/GitHub/sales-agent-site/aspro-sales-agent/aps-sales-agent/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/prottasofgrosskofic/Documents/GitHub/sales-agent-site/aspro-sales-agent/aps-sales-agent/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, ɵɵdefineInjectable, Component, Input, HostBinding, ElementRef, Host, Renderer2, NgModule } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction ProgressbarComponent_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"bar\", 2);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r0.type)(\"value\", ctx_r0._value)(\"max\", ctx_r0._max);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_1_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"bar\", 2);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"type\", item_r3.type)(\"value\", item_r3.value)(\"max\", item_r3.max);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(item_r3.label);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_ng_template_1_bar_0_Template, 2, 4, \"bar\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1._value);\n  }\n}\n\nvar _c0 = [\"*\"];\n\nvar ProgressbarConfig = /*#__PURE__*/_createClass(function ProgressbarConfig() {\n  _classCallCheck(this, ProgressbarConfig);\n\n  /**\n   * if `true` changing value of progress bar will be animated\n   */\n  this.animate = false;\n  /**\n   * maximum total value of progress element\n   */\n\n  this.max = 100;\n});\n\nProgressbarConfig.ɵfac = function ProgressbarConfig_Factory(t) {\n  return new (t || ProgressbarConfig)();\n};\n/** @nocollapse */\n\n\nProgressbarConfig.ɵprov = ɵɵdefineInjectable({\n  factory: function ProgressbarConfig_Factory() {\n    return new ProgressbarConfig();\n  },\n  token: ProgressbarConfig,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ProgressbarConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * if `true` changing value of progress bar will be animated\n   * @type {?}\n   */\n  ProgressbarConfig.prototype.animate;\n  /**\n   * maximum total value of progress element\n   * @type {?}\n   */\n\n  ProgressbarConfig.prototype.max;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ProgressbarComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} config\n   */\n  function ProgressbarComponent(config) {\n    _classCallCheck(this, ProgressbarComponent);\n\n    this.isStacked = false;\n    this._max = 100;\n    this.addClass = true;\n    /* tslint:disable-next-line:no-any */\n\n    this.bars = [];\n    Object.assign(this, config);\n  }\n  /**\n   * if `true` changing value of progress bar will be animated\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(ProgressbarComponent, [{\n    key: \"animate\",\n    set: function set(value) {\n      this._animate = value;\n      this.bars.forEach(\n      /**\n      * @param {?} b\n      * @return {?}\n      */\n      function (b) {\n        b.animate = value;\n      });\n    }\n    /**\n     * If `true`, striped classes are applied\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"striped\",\n    set: function set(value) {\n      this._striped = value;\n      this.bars.forEach(\n      /**\n      * @param {?} b\n      * @return {?}\n      */\n      function (b) {\n        b.striped = value;\n      });\n    }\n    /**\n     * current value of progress bar. Could be a number or array of objects\n     * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    set: function set(value) {\n      this.isStacked = Array.isArray(value);\n      this._value = value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBs3\",\n    get: function get() {\n      return isBs3();\n    }\n    /**\n     * maximum total value of progress element\n     * @return {?}\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._max;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._max = v;\n      this.bars.forEach(\n      /**\n      * @param {?} bar\n      * @return {?}\n      */\n      function (bar) {\n        bar.recalculatePercentage();\n      });\n    }\n    /**\n     * @param {?} bar\n     * @return {?}\n     */\n\n  }, {\n    key: \"addBar\",\n    value: function addBar(bar) {\n      bar.animate = this._animate;\n      bar.striped = this._striped;\n      this.bars.push(bar);\n    }\n    /**\n     * @param {?} bar\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeBar\",\n    value: function removeBar(bar) {\n      this.bars.splice(this.bars.indexOf(bar), 1);\n    }\n  }]);\n\n  return ProgressbarComponent;\n}();\n\nProgressbarComponent.ɵfac = function ProgressbarComponent_Factory(t) {\n  return new (t || ProgressbarComponent)(ɵngcc0.ɵɵdirectiveInject(ProgressbarConfig));\n};\n\nProgressbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ProgressbarComponent,\n  selectors: [[\"progressbar\"]],\n  hostVars: 3,\n  hostBindings: function ProgressbarComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"max\", ctx.max);\n      ɵngcc0.ɵɵclassProp(\"progress\", ctx.addClass);\n    }\n  },\n  inputs: {\n    animate: \"animate\",\n    striped: \"striped\",\n    value: \"value\",\n    max: \"max\",\n    type: \"type\"\n  },\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 2,\n  consts: [[3, \"type\", \"value\", \"max\", 4, \"ngIf\"], [3, \"ngIf\"], [3, \"type\", \"value\", \"max\"], [3, \"type\", \"value\", \"max\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function ProgressbarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_bar_0_Template, 2, 3, \"bar\", 0);\n      ɵngcc0.ɵɵtemplate(1, ProgressbarComponent_ng_template_1_Template, 1, 1, \"ng-template\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isStacked);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isStacked);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, BarComponent, ɵngcc1.NgForOf];\n  },\n  styles: [\"[_nghost-%COMP%] {\\n      width: 100%;\\n      display: flex;\\n    }\"]\n});\n/** @nocollapse */\n\nProgressbarComponent.ctorParameters = function () {\n  return [{\n    type: ProgressbarConfig\n  }];\n};\n\nProgressbarComponent.propDecorators = {\n  animate: [{\n    type: Input\n  }],\n  striped: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  max: [{\n    type: HostBinding,\n    args: ['attr.max']\n  }, {\n    type: Input\n  }],\n  addClass: [{\n    type: HostBinding,\n    args: ['class.progress']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ProgressbarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'progressbar',\n      template: \"<bar [type]=\\\"type\\\" [value]=\\\"_value\\\" [max]=\\\"_max\\\" *ngIf=\\\"!isStacked\\\">\\n  <ng-content></ng-content>\\n</bar>\\n<ng-template [ngIf]=\\\"isStacked\\\">\\n  <bar *ngFor=\\\"let item of _value\\\" [type]=\\\"item.type\\\" [value]=\\\"item.value\\\" [max]=\\\"item.max\\\">{{ item.label }}</bar>\\n</ng-template>\\n\",\n      styles: [\"\\n    :host {\\n      width: 100%;\\n      display: flex;\\n    }\\n  \"]\n    }]\n  }], function () {\n    return [{\n      type: ProgressbarConfig\n    }];\n  }, {\n    addClass: [{\n      type: HostBinding,\n      args: ['class.progress']\n    }],\n    animate: [{\n      type: Input\n    }],\n    striped: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    max: [{\n      type: HostBinding,\n      args: ['attr.max']\n    }, {\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger`\n   * @type {?}\n   */\n  ProgressbarComponent.prototype.type;\n  /** @type {?} */\n\n  ProgressbarComponent.prototype.isStacked;\n  /** @type {?} */\n\n  ProgressbarComponent.prototype._striped;\n  /** @type {?} */\n\n  ProgressbarComponent.prototype._animate;\n  /** @type {?} */\n\n  ProgressbarComponent.prototype._max;\n  /** @type {?} */\n\n  ProgressbarComponent.prototype._value;\n  /** @type {?} */\n\n  ProgressbarComponent.prototype.addClass;\n  /** @type {?} */\n\n  ProgressbarComponent.prototype.bars;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// todo: number pipe\n// todo: use query from progress?\n\n\nvar BarComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} el\n   * @param {?} progress\n   * @param {?} renderer\n   */\n  function BarComponent(el, progress, renderer) {\n    _classCallCheck(this, BarComponent);\n\n    this.el = el;\n    this.renderer = renderer;\n    this.addClass = true;\n    this.percent = 0;\n    this.progress = progress;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BarComponent, [{\n    key: \"setBarWidth\",\n    get: function get() {\n      this.recalculatePercentage();\n      return this.percent;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBs3\",\n    get: function get() {\n      return isBs3();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.progress.addBar(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.progress.removeBar(this);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.value) {\n        if (!changes.value.currentValue && changes.value.currentValue !== 0) {\n          return;\n        }\n\n        this.value = changes.value.currentValue;\n        this.recalculatePercentage();\n      }\n\n      if (changes.type) {\n        this.type = changes.type.currentValue;\n        this.applyTypeClasses();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"recalculatePercentage\",\n    value: function recalculatePercentage() {\n      this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n      /** @type {?} */\n\n      var totalPercentage = this.progress.bars.reduce(\n      /**\n      * @param {?} total\n      * @param {?} bar\n      * @return {?}\n      */\n      function (total, bar) {\n        return total + bar.percent;\n      }, 0);\n\n      if (totalPercentage > 100) {\n        this.percent -= totalPercentage - 100;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"applyTypeClasses\",\n    value: function applyTypeClasses() {\n      if (this._prevType) {\n        /** @type {?} */\n        var barTypeClass = \"progress-bar-\".concat(this._prevType);\n        /** @type {?} */\n\n        var bgClass = \"bg-\".concat(this._prevType);\n        this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n        this.renderer.removeClass(this.el.nativeElement, bgClass);\n        this._prevType = null;\n      }\n\n      if (this.type) {\n        /** @type {?} */\n        var _barTypeClass = \"progress-bar-\".concat(this.type);\n        /** @type {?} */\n\n\n        var _bgClass = \"bg-\".concat(this.type);\n\n        this.renderer.addClass(this.el.nativeElement, _barTypeClass);\n        this.renderer.addClass(this.el.nativeElement, _bgClass);\n        this._prevType = this.type;\n      }\n    }\n  }]);\n\n  return BarComponent;\n}();\n\nBarComponent.ɵfac = function BarComponent_Factory(t) {\n  return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ProgressbarComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarComponent,\n  selectors: [[\"bar\"]],\n  hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\"],\n  hostVars: 15,\n  hostBindings: function BarComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.percent ? ctx.percent.toFixed(0) + \"%\" : \"\")(\"aria-valuemax\", ctx.max);\n      ɵngcc0.ɵɵstyleProp(\"height\", \"100\", \"%\")(\"width\", ctx.setBarWidth, \"%\");\n      ɵngcc0.ɵɵclassProp(\"progress-bar-animated\", !ctx.isBs3 && ctx.animate)(\"progress-bar-striped\", ctx.striped)(\"active\", ctx.isBs3 && ctx.animate)(\"progress-bar\", ctx.addClass);\n    }\n  },\n  inputs: {\n    value: \"value\",\n    type: \"type\",\n    max: \"max\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function BarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nBarComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ProgressbarComponent,\n    decorators: [{\n      type: Host\n    }]\n  }, {\n    type: Renderer2\n  }];\n};\n\nBarComponent.propDecorators = {\n  max: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  setBarWidth: [{\n    type: HostBinding,\n    args: ['style.width.%']\n  }],\n  addClass: [{\n    type: HostBinding,\n    args: ['class.progress-bar']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bar',\n      template: \"<ng-content></ng-content>\\n\",\n      host: {\n        role: 'progressbar',\n        'aria-valuemin': '0',\n        '[class.progress-bar-animated]': '!isBs3 && animate',\n        '[class.progress-bar-striped]': 'striped',\n        '[class.active]': 'isBs3 && animate',\n        '[attr.aria-valuenow]': 'value',\n        '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n        '[attr.aria-valuemax]': 'max',\n        '[style.height.%]': '\"100\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ProgressbarComponent,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    addClass: [{\n      type: HostBinding,\n      args: ['class.progress-bar']\n    }],\n    setBarWidth: [{\n      type: HostBinding,\n      args: ['style.width.%']\n    }],\n    value: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  BarComponent.prototype.max;\n  /**\n   * provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger`\n   * @type {?}\n   */\n\n  BarComponent.prototype.type;\n  /**\n   * current value of progress bar\n   * @type {?}\n   */\n\n  BarComponent.prototype.value;\n  /** @type {?} */\n\n  BarComponent.prototype.addClass;\n  /** @type {?} */\n\n  BarComponent.prototype.striped;\n  /** @type {?} */\n\n  BarComponent.prototype.animate;\n  /** @type {?} */\n\n  BarComponent.prototype.percent;\n  /** @type {?} */\n\n  BarComponent.prototype.progress;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  BarComponent.prototype._prevType;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  BarComponent.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  BarComponent.prototype.renderer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ProgressbarModule = /*#__PURE__*/function () {\n  function ProgressbarModule() {\n    _classCallCheck(this, ProgressbarModule);\n  }\n\n  _createClass(ProgressbarModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @return {?}\n     */\n    function forRoot() {\n      return {\n        ngModule: ProgressbarModule,\n        providers: []\n      };\n    }\n  }]);\n\n  return ProgressbarModule;\n}();\n\nProgressbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ProgressbarModule\n});\nProgressbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ProgressbarModule_Factory(t) {\n    return new (t || ProgressbarModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressbarModule, {\n    declarations: function declarations() {\n      return [BarComponent, ProgressbarComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [BarComponent, ProgressbarComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ProgressbarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [BarComponent, ProgressbarComponent],\n      exports: [BarComponent, ProgressbarComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { BarComponent, ProgressbarComponent, ProgressbarConfig, ProgressbarModule };","map":{"version":3,"sources":["ngx-bootstrap/progressbar/progressbar.config.ts","ngx-bootstrap/progressbar/progressbar.component.ts","ngx-bootstrap/progressbar/bar.component.ts","ngx-bootstrap/progressbar/progressbar.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKa,iB,6BAHb,6BAAA;AAAA;;AACE;AAAY;AAGY;AACxB,OAAA,OAAA,GAAmB,KAAnB;AACF;AAAY;AAEX;;AADC,OAAA,GAAA,GAAM,GAAN;AACD,C;;kCARA,yB,CAAU,C,EAAA;AAAC,SAAA,KAAA,CAAA,IACV,iBADU,GAAA;AACQ,C;AACnB;;;AAAA,iBAAA,CAAA,KAAA,GAAA,kBAAA,CAAA;AAAA,EAAA,OAAA,EAAA,SAAA,yBAAA,GAAA;AAAA,WAAA,IAAA,iBAAA,EAAA;AAAA,GAAA;AAAA,EAAA,KAAA,EAAA,iBAAA;AAAA,EAAA,UAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;;;AAOU,C;;AAAC,IAAA,KAAA,EAAA;AAAa;AAAQ;AAAiE;AAAiB;AAJjH,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA;AACF;AAAQ;AACF;AAEE;;AAFN,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA;AACF;AACC;AAAI;AAAkC;AAAqH;;;ICO/I,oB;AACb;AAAQ;AAAyB;AAyD/B,gCAAY,MAAZ,EAAqC;AAAA;;AA7BrC,SAAA,SAAA,GAAY,KAAZ;AAGA,SAAA,IAAA,GAAO,GAAP;AAsB+B,SAAA,QAAA,GAAW,IAAX;AACjC;;AAEE,SAAA,IAAA,GAAuB,EAAvB;AAEE,IAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,MAApB;AACD;AACH;AAAQ;AAEJ;AAAwB;AAEf;;;;;SA/DX,aACY,KADZ,EAC0B;AACxB,WAAK,QAAL,GAAgB,KAAhB;AACA,WAAK,IAAL,CAAU,OAAV;AAAiB;AAAM;AACrB;AACF;AAFkB,gBAAC,CAAD,EAAgB;AAChC,QAAA,CAAC,CAAC,OAAF,GAAY,KAAZ;AACD,OAFD;AAGD;AACH;AAAQ;AACF;AACa;AACb;;;;SAFJ,aACY,KADZ,EAC0B;AACxB,WAAK,QAAL,GAAgB,KAAhB;AACA,WAAK,IAAL,CAAU,OAAV;AAAiB;AAAM;AACrB;AACF;AAFkB,gBAAC,CAAD,EAAgB;AAChC,QAAA,CAAC,CAAC,OAAF,GAAY,KAAZ;AACD,OAFD;AAGD;AACH;AACO;AAA4E;AAElF;AAAwB;AAAmB;;;;SAG1C,aAEU,KAFV,EAE+B;AAC7B,WAAK,SAAL,GAAiB,KAAK,CAAC,OAAN,CAAc,KAAd,CAAjB;AACA,WAAK,MAAL,GAAc,KAAd;AACD;AACH;AAAQ;AACF;;;;SAMJ,eAAS;AACP,aAAO,KAAK,EAAZ;AACD;AACH;AACO;AACF;AAAmB;;;;SAAtB,eAEO;AACL,aAAO,KAAK,IAAZ;AACD;AACH;AACO;AACH;AACA;;SAFF,aAAQ,CAAR,EAAiB;AACf,WAAK,IAAL,GAAY,CAAZ;AACA,WAAK,IAAL,CAAU,OAAV;AAAiB;AAAM;AACrB;AAAuB;AADP,gBAAC,GAAD,EAAkB;AAClC,QAAA,GAAG,CAAC,qBAAJ;AACD,OAFD;AAGD;AACH;AACO;AAAsB;AAAmB;;;;WAO9C,gBAAO,GAAP,EAAwB;AACtB,MAAA,GAAG,CAAC,OAAJ,GAAc,KAAK,QAAnB;AACA,MAAA,GAAG,CAAC,OAAJ,GAAc,KAAK,QAAnB;AAEA,WAAK,IAAL,CAAU,IAAV,CAAe,GAAf;AACD;AACH;AACO;AAAsB;AACpB;;;;WADP,mBAAU,GAAV,EAA2B;AACzB,WAAK,IAAL,CAAU,MAAV,CAAiB,KAAK,IAAL,CAAU,OAAV,CAAkB,GAAlB,CAAjB,EAAyC,CAAzC;AACD;;;;;;qCAlFF,4B,CAAU,C,EAAA;AAAA,SAAA,KAAA,CACT,IAAA,oBADS,EACc,MAAA,CAAA,iBAAA,CACvB,iBADuB,CADd,CAAA;AAET,C;;;;;;;;;aAA2C,W,CAAA,U,EAAA,GAAA,CAAA,Q;;;;;aAO1C,S;AAAA,IAAA,KAAA,EAAA,O;AAEF,IAAA,GAAA,EAAA,K;AAAA,IAAA,IAAA,EAAA;;AAAA,EAAA,kBAAA,EAAA,G;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,6BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;;;;WACG,qE;;AAAC;;AAAmB,oBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CACU;AAAA,IAAA,IAAA,EAlBzB;AAkByB,GADV,CAAA;AAAA,CAAA;;AAjBQ,oBAAA,CAAA,cAAA,GAAA;AAClB,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAkBX;AAlBW,GAAA,CADkB;AAoB9B,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAOC;AAPD,GAAA,CApB8B;AA4B9B,EAAA,IAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAQC;AARD,GAAA,CA5B8B;AAoCnB,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAIV;AAJU,GAAA,CApCmB;AAyC9B,EAAA,GAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAiBC,WAjBD;AAiBY,IAAA,IAAA,EAAA,CAAC,UAAD;AAjBZ,GAAA,EAiBuB;AAAA,IAAA,IAAA,EACtB;AADsB,GAjBvB,CAzC8B;AA4D9B,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAWC,WAXD;AAWY,IAAA,IAAA,EAAA,CAAC,gBAAD;AAXZ,GAAA;AA5D8B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEO,C;;AAAC,IAAA,KAAA,EAAA;AAEtC;AAAQ;AAE+B;AAC1B;AAxCb,EAAA,oBAAA,CAAA,SAAA,CAAA,IAAA;AACF;;AASE,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA;AACF;;AAAE,EAAA,oBAAA,CAAA,SAAA,CAAA,QAAA;AACF;;AAAE,EAAA,oBAAA,CAAA,SAAA,CAAA,QAAA;AACF;;AAAE,EAAA,oBAAA,CAAA,SAAA,CAAA,IAAA;AACF;;AAEE,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA;AACF;;AAkBE,EAAA,oBAAA,CAAA,SAAA,CAAA,QAAA;AACF;;AAEE,EAAA,oBAAA,CAAA,SAAA,CAAA,IAAA;AACF;AAAG;AAAI;AAAkC;AAKhC;ACjFT;AACY;;;IA8BC,Y;AAAe;AAAQ;AACpC;AACG;AAA2B;AA0B5B,wBACU,EADV,EAEU,QAFV,EAGU,QAHV,EAG6B;AAAA;;AAFnB,SAAA,EAAA,GAAA,EAAA;AAEA,SAAA,QAAA,GAAA,QAAA;AAhByB,SAAA,QAAA,GAAW,IAAX;AAQnC,SAAA,OAAA,GAAU,CAAV;AAUE,SAAK,QAAL,GAAgB,QAAhB;AACD;AACH;AACO;AACF;;;;;SA7BH,eACe;AACb,WAAK,qBAAL;AAEA,aAAO,KAAK,OAAZ;AACD;AACH;AACO;AAAmB;;;;SAExB,eAAS;AACP,aAAO,KAAK,EAAZ;AACD;AACH;AACO;AACD;;;;WAcJ,oBAAQ;AACN,WAAK,QAAL,CAAc,MAAd,CAAqB,IAArB;AACD;AACH;AACO;AACL;;;;WADA,uBAAW;AACT,WAAK,QAAL,CAAc,SAAd,CAAwB,IAAxB;AACD;AACH;AACO;AAA0B;AACrB;;;;WADV,qBAAY,OAAZ,EAAkC;AAChC,UAAI,OAAO,CAAC,KAAZ,EAAmB;AACjB,YAAI,CAAC,OAAO,CAAC,KAAR,CAAc,YAAf,IAA+B,OAAO,CAAC,KAAR,CAAc,YAAd,KAA+B,CAAlE,EAAqE;AACnE;AACD;;AACD,aAAK,KAAL,GAAa,OAAO,CAAC,KAAR,CAAc,YAA3B;AACA,aAAK,qBAAL;AACD;;AAED,UAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,aAAK,IAAL,GAAY,OAAO,CAAC,IAAR,CAAa,YAAzB;AACA,aAAK,gBAAL;AACD;AACF;AACH;AACO;AAAmB;;;;WAAxB,iCAAqB;AACnB,WAAK,OAAL,GAAe,CAAC,CAAC,KAAK,KAAL,GAAa,KAAK,QAAL,CAAc,GAA3B,GAAiC,GAAlC,EAAuC,OAAvC,CAA+C,CAA/C,CAAhB;AACJ;;AACwB,UAAd,eAAe,GAAG,KAAK,QAAL,CAAc,IAAd,CACrB,MADqB;AACf;AAAM;AAA4B;AAC1C;AAAuB;AADd,gBAAU,KAAV,EAAyB,GAAzB,EAA0C;AAChD,eAAO,KAAK,GAAG,GAAG,CAAC,OAAnB;AACD,OAHqB,EAGnB,CAHmB,CAAJ;;AAKpB,UAAI,eAAe,GAAG,GAAtB,EAA2B;AACzB,aAAK,OAAL,IAAgB,eAAe,GAAG,GAAlC;AACD;AACF;AACH;AACO;AAAgB;AAClB;;;;WADK,4BAAgB;AACtB,UAAI,KAAK,SAAT,EAAoB;AACxB;AAA6B,YAAjB,YAAY,0BAAmB,KAAK,SAAxB,CAAK;AAC7B;;AAA6B,YAAjB,OAAO,gBAAS,KAAK,SAAd,CAAU;AACvB,aAAK,QAAL,CAAc,WAAd,CAA0B,KAAK,EAAL,CAAQ,aAAlC,EAAiD,YAAjD;AACA,aAAK,QAAL,CAAc,WAAd,CAA0B,KAAK,EAAL,CAAQ,aAAlC,EAAiD,OAAjD;AACA,aAAK,SAAL,GAAiB,IAAjB;AACD;;AAED,UAAI,KAAK,IAAT,EAAe;AACnB;AAA6B,YAAjB,aAAY,0BAAmB,KAAK,IAAxB,CAAK;AAC7B;;;AAA6B,YAAjB,QAAO,gBAAS,KAAK,IAAd,CAAU;;AACvB,aAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,EAAL,CAAQ,aAA/B,EAA8C,aAA9C;AACA,aAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,EAAL,CAAQ,aAA/B,EAA8C,QAA9C;AACA,aAAK,SAAL,GAAiB,KAAK,IAAtB;AACD;AACF;;;;;;6BAvGF,oB,CAAS,C,EAAA;AAAA,SAAC,KAAA,CAAA,IAAA,YAAA,EACC,MAAK,CAAA,iBAAL,CACV,MAAA,CAAA,UADU,CADD,EAET,MAAA,CAAA,iBAAA,CAAmC,oBAAnC,EACM,CADN,CAFS,EAGH,MAAA,CAAA,iBAAA,CACE,MAAa,CAAA,SADf,CAHG,CAAD;AAIa,C;;AACnB,YAAA,CAAA,IAAA,GAAe,MAAK,CAAA,iBAAL,CAAK;AACpB,EAAA,IAAA,EAAA,YADoB;AACpB,EAAA,SAAA,EAA+B,CAAA,CAAE,KAAF,CAAA,CADX;AACa,EAAA,SAAA,EAAmB,CAAA,MAAA,EAAA,aAAA,EACpD,eADoD,EACpD,GADoD,CADhC;AAEpB,EAAA,QAAgC,EAAA,EAFZ;AAEY,EAAA,YAAS,EAAA,SACzC,yBADyC,CACvB,EADuB,EACvB,GADuB,EACvB;AAAkB,QAAA,EAAA,GAAA,CAAA,EAAA;AACpC,MAAA,MAAA,CAAA,WAAA,CAAA,eAAA,EAA+B,GAAA,CAAA,KAA/B,EAA+B,gBAA/B,EACA,GAAA,CAAA,OAAA,GAAyB,GAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,IAAA,GAAzB,GAAyB,EADzB,EACyB,eADzB,EACkE,GAAA,CAAA,GADlE;aAEsB,W,CAAE,Q,EAAK,K,EAAA,G,EAAA,O,EAC7B,GAAA,CAAA,W,EAAoB,G;YACrB,CAAA,W,CAAA,uB,EACF,CAAA,GAAA,CAAA,KAAA,IAAA,GAAA,CAAA,O,EAAA,sB,EAAA,GAAA,CAAA,O,EAAA,Q,EAAA,GAAA,CAAA,KAAA,IAAA,GAAA,CAAA,O,EAAA,c,EAAA,GAAA,CAAA,Q;;GATuB;;;;;GAAA;yCAAA;yBAAA;UAAA;SAAA;;;;;;GAAA;iBAUpB;AAVoB,CAAL,CAAf;AAUC;;AAAmB,YAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CACnB;AAAA,IAAA,IAAA,EAzBH;AAyBG,GADmB,EAvBtB;AAAA,IAAA,IAAA,EAGO,oBAHP;AAG2B,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAkDxB;AAlDwB,KAAA;AAH3B,GAuBsB,EA8BR;AAAA,IAAA,IAAA,EArDd;AAqDc,GA9BQ,CAAA;AAAA,CAAA;;AAvBP,YAAA,CAAA,cAAA,GAAA;AACK,EAAA,GAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAuBnB;AAvBmB,GAAA,CADL;AAwBJ,EAAA,IAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAEV;AAFU,GAAA,CAxBI;AA0BJ,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAGV;AAHU,GAAA,CA1BI;AA6BJ,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAEV,WAFU;AAEC,IAAA,IAAA,EAAA,CAAC,eAAD;AAFD,GAAA,CA7BI;AAgCZ,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAMF,WANE;AAMS,IAAA,IAAA,EAAA,CAAC,oBAAD;AANT,GAAA;AAhCY,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsC0B,C;;AAAC,IAAA,KAAA,EAAA;AAE1C;AAhBA,EAAA,YAAA,CAAA,SAAA,CAAA,GAAA;AACF;AAAQ;AACF;AAAiB;;AAArB,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA;AACF;AACO;AACF;AAAiB;;AAApB,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA;AACF;;AAQE,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA;AACF;;AAKE,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA;AACF;;AAAE,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA;AACF;;AAAE,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA;AACF;;AAAE,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA;AACF;AACO;AAAiB;AAEd;;AAFR,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA;AACF;AACO;AACE;AAAgB;;AAArB,EAAA,YAAA,CAAA,SAAA,CAAA,EAAA;AAAuB;AACpB;AAAiB;AAAgB;;AACpC,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA;AACJ;AAAG;AACF;AAGD;AAMA;;;IC9Da,iB;;;;;;;;AACb;AAAQ;AAAmB;AAAzB,uBAAc;AACZ,aAAO;AAAE,QAAA,QAAQ,EAAE,iBAAZ;AAA+B,QAAA,SAAS,EAAE;AAA1C,OAAP;AACD;;;;;;gCARF,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,iBAAU,CAAA,IAAV,GAAuB,MAAA,CAAA,gBAAA,CACvB;AAAA,EAAA,OAAe,EAAA,SAAY,yBAAZ,CAAmC,CAAnC,EAAmC;AAAA,WAAA,KAClD,CAAA,IAAO,iBAD2C,GAAA;AAC1B,GADxB;AACwB,EAAA,OAAA,EAAA,CAAA,CAAA,YAAA,CAAA;AADxB,CADuB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIG,C;AAAE;AAAI;AACC;AAIT;;AAAK;AAAI;AAAkC;AAAqH;;;AAAK,SAAA,YAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,iBAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProgressbarConfig {\n  /** if `true` changing value of progress bar will be animated */\n  animate: Boolean = false;\n  /** maximum total value of progress element */\n  max = 100;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { ProgressbarConfig } from './progressbar.config';\nimport { ProgressbarType } from './progressbar-type.interface';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { BarComponent } from './bar.component';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  styles: [\n    `\n    :host {\n      width: 100%;\n      display: flex;\n    }\n  `\n  ]\n})\nexport class ProgressbarComponent {\n  /** if `true` changing value of progress bar will be animated */\n  @Input()\n  set animate(value: boolean) {\n    this._animate = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.animate = value;\n    });\n  }\n  /** If `true`, striped classes are applied */\n  @Input()\n  set striped(value: boolean) {\n    this._striped = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.striped = value;\n    });\n  }\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: ProgressbarType;\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  set value(value: number | any[]) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  }\n  isStacked = false;\n  _striped: boolean;\n  _animate: boolean;\n  _max = 100;\n\n  /* tslint:disable-next-line:no-any */\n  _value: number | any[];\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  /** maximum total value of progress element */\n  @HostBinding('attr.max')\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n\n  set max(v: number) {\n    this._max = v;\n    this.bars.forEach((bar: BarComponent) => {\n      bar.recalculatePercentage();\n    });\n  }\n\n  @HostBinding('class.progress') addClass = true;\n\n  /* tslint:disable-next-line:no-any */\n  bars: BarComponent[] = [];\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n  addBar(bar: BarComponent): void {\n    bar.animate = this._animate;\n    bar.striped = this._striped;\n\n    this.bars.push(bar);\n  }\n\n  removeBar(bar: BarComponent): void {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\n}\n","import {\n  Component,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Renderer2, SimpleChanges\n} from '@angular/core';\n\nimport { ProgressbarComponent } from './progressbar.component';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n// todo: number pipe\n// todo: use query from progress?\n@Component({\n  selector: 'bar',\n  templateUrl: './bar.component.html',\n  host: {\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    '[class.progress-bar-animated]': '!isBs3 && animate',\n    '[class.progress-bar-striped]': 'striped',\n    '[class.active]': 'isBs3 && animate',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n    '[attr.aria-valuemax]': 'max',\n    '[style.height.%]': '\"100\"'\n  }\n})\nexport class BarComponent implements OnInit, OnDestroy {\n  @Input() max: number;\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: string;\n\n  /** current value of progress bar */\n  @Input() value: number;\n\n  @HostBinding('style.width.%')\n  get setBarWidth() {\n    this.recalculatePercentage();\n\n    return this.percent;\n  }\n\n  @HostBinding('class.progress-bar') addClass = true;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  striped: boolean;\n  animate: boolean;\n  percent = 0;\n  progress: ProgressbarComponent;\n\n  private _prevType: string;\n\n  constructor(\n    private el: ElementRef,\n    @Host() progress: ProgressbarComponent,\n    private renderer: Renderer2\n  ) {\n    this.progress = progress;\n  }\n\n  ngOnInit(): void {\n    this.progress.addBar(this);\n  }\n\n  ngOnDestroy(): void {\n    this.progress.removeBar(this);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.value) {\n      if (!changes.value.currentValue && changes.value.currentValue !== 0) {\n        return;\n      }\n      this.value = changes.value.currentValue;\n      this.recalculatePercentage();\n    }\n\n    if (changes.type) {\n      this.type = changes.type.currentValue;\n      this.applyTypeClasses();\n    }\n  }\n\n  recalculatePercentage(): void {\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n\n    const totalPercentage = this.progress.bars\n      .reduce(function (total: number, bar: BarComponent): number {\n        return total + bar.percent;\n      }, 0);\n\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  }\n\n  private applyTypeClasses(): void {\n    if (this._prevType) {\n      const barTypeClass = `progress-bar-${this._prevType}`;\n      const bgClass = `bg-${this._prevType}`;\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\n      this._prevType = null;\n    }\n\n    if (this.type) {\n      const barTypeClass = `progress-bar-${this.type}`;\n      const bgClass = `bg-${this.type}`;\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\n      this.renderer.addClass(this.el.nativeElement, bgClass);\n      this._prevType = this.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { BarComponent } from './bar.component';\nimport { ProgressbarComponent } from './progressbar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BarComponent, ProgressbarComponent],\n  exports: [BarComponent, ProgressbarComponent]\n})\nexport class ProgressbarModule {\n  static forRoot(): ModuleWithProviders<ProgressbarModule> {\n    return { ngModule: ProgressbarModule, providers: [] };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}