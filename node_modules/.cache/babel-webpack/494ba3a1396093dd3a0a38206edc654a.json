{"ast":null,"code":"import _createClass from \"/Users/prottasofgrosskofic/Documents/GitHub/sales-agent-site/new-repo/sales-agent-aps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/prottasofgrosskofic/Documents/GitHub/sales-agent-site/new-repo/sales-agent-aps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, ɵɵdefineInjectable, Component, ChangeDetectionStrategy, EventEmitter, Directive, ViewContainerRef, ElementRef, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport { isBs3, warnOnce, parseTriggers, OnChange } from 'ngx-bootstrap/utils';\nimport { __decorate, __metadata } from 'tslib';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { timer } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default values provider for tooltip\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ngx-bootstrap/component-loader';\nimport * as ɵngcc2 from 'ngx-bootstrap/positioning';\nvar _c0 = [\"*\"];\n\nvar TooltipConfig = /*#__PURE__*/_createClass(function TooltipConfig() {\n  _classCallCheck(this, TooltipConfig);\n\n  /**\n   * sets disable adaptive position\n   */\n  this.adaptivePosition = true;\n  /**\n   * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'\n   */\n\n  this.placement = 'top';\n  /**\n   * array of event names which triggers tooltip opening\n   */\n\n  this.triggers = 'hover focus';\n  /**\n   * delay before showing the tooltip\n   */\n\n  this.delay = 0;\n});\n\nTooltipConfig.ɵfac = function TooltipConfig_Factory(t) {\n  return new (t || TooltipConfig)();\n};\n/** @nocollapse */\n\n\nTooltipConfig.ɵprov = ɵɵdefineInjectable({\n  factory: function TooltipConfig_Factory() {\n    return new TooltipConfig();\n  },\n  token: TooltipConfig,\n  providedIn: \"root\"\n});\n\nif (false) {\n  /**\n   * sets disable adaptive position\n   * @type {?}\n   */\n  TooltipConfig.prototype.adaptivePosition;\n  /**\n   * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.placement;\n  /**\n   * array of event names which triggers tooltip opening\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.triggers;\n  /**\n   * a selector specifying the element the tooltip should be appended to.\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.container;\n  /**\n   * delay before showing the tooltip\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.delay;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TooltipContainerComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} config\n   */\n  function TooltipContainerComponent(config) {\n    _classCallCheck(this, TooltipContainerComponent);\n\n    Object.assign(this, config);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(TooltipContainerComponent, [{\n    key: \"isBs3\",\n    get: function get() {\n      return isBs3();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.classMap = {\n        in: false,\n        fade: false\n      };\n      this.classMap[this.placement] = true;\n      this.classMap[\"tooltip-\".concat(this.placement)] = true;\n      this.classMap.in = true;\n\n      if (this.animation) {\n        this.classMap.fade = true;\n      }\n\n      if (this.containerClass) {\n        this.classMap[this.containerClass] = true;\n      }\n    }\n  }]);\n\n  return TooltipContainerComponent;\n}();\n\nTooltipContainerComponent.ɵfac = function TooltipContainerComponent_Factory(t) {\n  return new (t || TooltipContainerComponent)(ɵngcc0.ɵɵdirectiveInject(TooltipConfig));\n};\n\nTooltipContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TooltipContainerComponent,\n  selectors: [[\"bs-tooltip-container\"]],\n  hostAttrs: [\"role\", \"tooltip\"],\n  hostVars: 7,\n  hostBindings: function TooltipContainerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassMap(\"tooltip in tooltip-\" + ctx.placement + \" \" + \"bs-tooltip-\" + ctx.placement + \" \" + ctx.placement + \" \" + ctx.containerClass);\n      ɵngcc0.ɵɵclassProp(\"show\", !ctx.isBs3)(\"bs3\", ctx.isBs3);\n    }\n  },\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"tooltip-arrow\", \"arrow\"], [1, \"tooltip-inner\"]],\n  template: function TooltipContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelement(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".tooltip[_nghost-%COMP%] {\\n      display: block;\\n      pointer-events: none;\\n    }\\n    .bs3.tooltip.top[_nghost-%COMP%] > .arrow[_ngcontent-%COMP%] {\\n      margin-left: -2px;\\n    }\\n    .bs3.tooltip.bottom[_nghost-%COMP%] {\\n      margin-top: 0px;\\n    }\\n    .bs3.bs-tooltip-left[_nghost-%COMP%], .bs3.bs-tooltip-right[_nghost-%COMP%]{\\n      margin: 0px;\\n    }\\n    .bs3.bs-tooltip-right[_nghost-%COMP%]   .arrow[_ngcontent-%COMP%], .bs3.bs-tooltip-left[_nghost-%COMP%]   .arrow[_ngcontent-%COMP%] {\\n      margin: .3rem 0;\\n    }\"],\n  changeDetection: 0\n});\n/** @nocollapse */\n\nTooltipContainerComponent.ctorParameters = function () {\n  return [{\n    type: TooltipConfig\n  }];\n};\n\nif (false) {\n  /** @type {?} */\n  TooltipContainerComponent.prototype.classMap;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.placement;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.containerClass;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.animation;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.id;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar id = 0;\n\nvar TooltipDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewContainerRef\n   * @param {?} cis\n   * @param {?} config\n   * @param {?} _elementRef\n   * @param {?} _renderer\n   * @param {?} _positionService\n   */\n  function TooltipDirective(_viewContainerRef, cis, config, _elementRef, _renderer, _positionService) {\n    _classCallCheck(this, TooltipDirective);\n\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._positionService = _positionService;\n    this.tooltipId = id++;\n    /**\n     * Fired when tooltip content changes\n     */\n\n    /* tslint:disable-next-line:no-any */\n\n    this.tooltipChange = new EventEmitter();\n    /**\n     * Css class for tooltip container\n     */\n\n    this.containerClass = '';\n    /**\n     * @deprecated - removed, will be added to configuration\n     */\n\n    this.tooltipAnimation = true;\n    /**\n     * @deprecated\n     */\n\n    this.tooltipFadeDuration = 150;\n    /**\n     * @deprecated\n     */\n\n    this.tooltipStateChanged = new EventEmitter();\n    this._tooltip = cis.createLoader(this._elementRef, _viewContainerRef, this._renderer).provide({\n      provide: TooltipConfig,\n      useValue: config\n    });\n    Object.assign(this, config);\n    this.onShown = this._tooltip.onShown;\n    this.onHidden = this._tooltip.onHidden;\n  }\n  /**\n   * Returns whether or not the tooltip is currently being shown\n   * @return {?}\n   */\n\n\n  _createClass(TooltipDirective, [{\n    key: \"isOpen\",\n    get: function get() {\n      return this._tooltip.isShown;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n    /**\n     * @deprecated - please use `tooltip` instead\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"htmlContent\",\n    set: function set(value) {\n      warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');\n      this.tooltip = value;\n    }\n    /**\n     * @deprecated - please use `placement` instead\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_placement\",\n    set: function set(value) {\n      warnOnce('tooltipPlacement was deprecated, please use `placement` instead');\n      this.placement = value;\n    }\n    /**\n     * @deprecated - please use `isOpen` instead\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isOpen\",\n    get:\n    /**\n     * @return {?}\n     */\n    function get() {\n      warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n      return this.isOpen;\n    }\n    /**\n     * @deprecated - please use `isDisabled` instead\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n      this.isOpen = value;\n    }\n  }, {\n    key: \"_enable\",\n    get:\n    /**\n     * @return {?}\n     */\n    function get() {\n      warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n      return this.isDisabled;\n    }\n    /**\n     * @deprecated - please use `container=\"body\"` instead\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n      this.isDisabled = !value;\n    }\n  }, {\n    key: \"_appendToBody\",\n    get:\n    /**\n     * @return {?}\n     */\n    function get() {\n      warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n      return this.container === 'body';\n    }\n    /**\n     * @deprecated - will replaced with customClass\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n      this.container = value ? 'body' : this.container;\n    }\n  }, {\n    key: \"_popupClass\",\n    set: function set(value) {\n      warnOnce('tooltipClass deprecated');\n    }\n    /**\n     * @deprecated - removed\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_tooltipContext\",\n    set: function set(value) {\n      warnOnce('tooltipContext deprecated');\n    }\n    /**\n     * @deprecated\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_tooltipPopupDelay\",\n    set: function set(value) {\n      warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');\n      this.delay = value;\n    }\n    /**\n     * @deprecated -  please use `triggers` instead\n     * @return {?}\n     */\n\n  }, {\n    key: \"_tooltipTrigger\",\n    get: function get() {\n      warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n      return this.triggers;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n      this.triggers = (value || '').toString();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this._tooltip.listen({\n        triggers: this.triggers,\n        show:\n        /**\n        * @return {?}\n        */\n        function show() {\n          return _this.show();\n        }\n      });\n      /* tslint:disable-next-line:no-any */\n\n\n      this.tooltipChange.subscribe(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      function (value) {\n        if (!value) {\n          _this._tooltip.hide();\n        }\n      });\n      this.onShown.subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this.setAriaDescribedBy();\n      });\n      this.onHidden.subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this.setAriaDescribedBy();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"setAriaDescribedBy\",\n    value: function setAriaDescribedBy() {\n      this._ariaDescribedby = this.isOpen ? \"tooltip-\".concat(this.tooltipId) : null;\n\n      if (this._ariaDescribedby) {\n        this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ariaDescribedby);\n      } else {\n        this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n      }\n    }\n    /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.isOpen) {\n        return this.hide();\n      }\n\n      this.show();\n    }\n    /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this2 = this;\n\n      this._positionService.setOptions({\n        modifiers: {\n          flip: {\n            enabled: this.adaptivePosition\n          },\n          preventOverflow: {\n            enabled: this.adaptivePosition\n          }\n        }\n      });\n\n      if (this.isOpen || this.isDisabled || this._delayTimeoutId || !this.tooltip) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var showTooltip =\n      /**\n      * @return {?}\n      */\n      function showTooltip() {\n        if (_this2._delayTimeoutId) {\n          _this2._delayTimeoutId = undefined;\n        }\n\n        _this2._tooltip.attach(TooltipContainerComponent).to(_this2.container).position({\n          attachment: _this2.placement\n        }).show({\n          content: _this2.tooltip,\n          placement: _this2.placement,\n          containerClass: _this2.containerClass,\n          id: \"tooltip-\".concat(_this2.tooltipId)\n        });\n      };\n      /** @type {?} */\n\n\n      var cancelDelayedTooltipShowing =\n      /**\n      * @return {?}\n      */\n      function cancelDelayedTooltipShowing() {\n        if (_this2._tooltipCancelShowFn) {\n          _this2._tooltipCancelShowFn();\n        }\n      };\n\n      if (this.delay) {\n        if (this._delaySubscription) {\n          this._delaySubscription.unsubscribe();\n        }\n\n        this._delaySubscription = timer(this.delay).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          showTooltip();\n          cancelDelayedTooltipShowing();\n        });\n\n        if (this.triggers) {\n          parseTriggers(this.triggers).forEach(\n          /**\n          * @param {?} trigger\n          * @return {?}\n          */\n          function (trigger) {\n            _this2._tooltipCancelShowFn = _this2._renderer.listen(_this2._elementRef.nativeElement, trigger.close,\n            /**\n            * @return {?}\n            */\n            function () {\n              _this2._delaySubscription.unsubscribe();\n\n              cancelDelayedTooltipShowing();\n            });\n          });\n        }\n      } else {\n        showTooltip();\n      }\n    }\n    /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var _this3 = this;\n\n      if (this._delayTimeoutId) {\n        clearTimeout(this._delayTimeoutId);\n        this._delayTimeoutId = undefined;\n      }\n\n      if (!this._tooltip.isShown) {\n        return;\n      }\n\n      this._tooltip.instance.classMap.in = false;\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this3._tooltip.hide();\n      }, this.tooltipFadeDuration);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._tooltip.dispose();\n\n      this.tooltipChange.unsubscribe();\n\n      if (this._delaySubscription) {\n        this._delaySubscription.unsubscribe();\n      }\n\n      this.onShown.unsubscribe();\n      this.onHidden.unsubscribe();\n    }\n  }]);\n\n  return TooltipDirective;\n}();\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ComponentLoaderFactory), ɵngcc0.ɵɵdirectiveInject(TooltipConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PositioningService));\n};\n\nTooltipDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"tooltip\", \"\"], [\"\", \"tooltipHtml\", \"\"]],\n  inputs: {\n    containerClass: \"containerClass\",\n    tooltipAnimation: \"tooltipAnimation\",\n    tooltipFadeDuration: \"tooltipFadeDuration\",\n    isOpen: \"isOpen\",\n    htmlContent: [\"tooltipHtml\", \"htmlContent\"],\n    tooltip: \"tooltip\",\n    _placement: [\"tooltipPlacement\", \"_placement\"],\n    placement: \"placement\",\n    _isOpen: [\"tooltipIsOpen\", \"_isOpen\"],\n    _enable: [\"tooltipEnable\", \"_enable\"],\n    isDisabled: \"isDisabled\",\n    _appendToBody: [\"tooltipAppendToBody\", \"_appendToBody\"],\n    container: \"container\",\n    _popupClass: [\"tooltipClass\", \"_popupClass\"],\n    _tooltipContext: [\"tooltipContext\", \"_tooltipContext\"],\n    _tooltipPopupDelay: [\"tooltipPopupDelay\", \"_tooltipPopupDelay\"],\n    delay: \"delay\",\n    _tooltipTrigger: [\"tooltipTrigger\", \"_tooltipTrigger\"],\n    triggers: \"triggers\",\n    adaptivePosition: \"adaptivePosition\"\n  },\n  outputs: {\n    tooltipChange: \"tooltipChange\",\n    tooltipStateChanged: \"tooltipStateChanged\",\n    onShown: \"onShown\",\n    onHidden: \"onHidden\"\n  },\n  exportAs: [\"bs-tooltip\"]\n});\n/** @nocollapse */\n\nTooltipDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ComponentLoaderFactory\n  }, {\n    type: TooltipConfig\n  }, {\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: PositioningService\n  }];\n};\n\nTooltipDirective.propDecorators = {\n  adaptivePosition: [{\n    type: Input\n  }],\n  tooltip: [{\n    type: Input\n  }],\n  tooltipChange: [{\n    type: Output\n  }],\n  placement: [{\n    type: Input\n  }],\n  triggers: [{\n    type: Input\n  }],\n  container: [{\n    type: Input\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  isOpen: [{\n    type: Input\n  }],\n  isDisabled: [{\n    type: Input\n  }],\n  delay: [{\n    type: Input\n  }],\n  onShown: [{\n    type: Output\n  }],\n  onHidden: [{\n    type: Output\n  }],\n  htmlContent: [{\n    type: Input,\n    args: ['tooltipHtml']\n  }],\n  _placement: [{\n    type: Input,\n    args: ['tooltipPlacement']\n  }],\n  _isOpen: [{\n    type: Input,\n    args: ['tooltipIsOpen']\n  }],\n  _enable: [{\n    type: Input,\n    args: ['tooltipEnable']\n  }],\n  _appendToBody: [{\n    type: Input,\n    args: ['tooltipAppendToBody']\n  }],\n  tooltipAnimation: [{\n    type: Input\n  }],\n  _popupClass: [{\n    type: Input,\n    args: ['tooltipClass']\n  }],\n  _tooltipContext: [{\n    type: Input,\n    args: ['tooltipContext']\n  }],\n  _tooltipPopupDelay: [{\n    type: Input,\n    args: ['tooltipPopupDelay']\n  }],\n  tooltipFadeDuration: [{\n    type: Input\n  }],\n  _tooltipTrigger: [{\n    type: Input,\n    args: ['tooltipTrigger']\n  }],\n  tooltipStateChanged: [{\n    type: Output\n  }]\n};\n\n__decorate([OnChange(), __metadata(\"design:type\", Object)], TooltipDirective.prototype, \"tooltip\", void 0);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bs-tooltip-container',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      // tslint:disable-next-line\n      host: {\n        '[class]': '\"tooltip in tooltip-\" + placement + \" \" + \"bs-tooltip-\" + placement + \" \" + placement + \" \" + containerClass',\n        '[class.show]': '!isBs3',\n        '[class.bs3]': 'isBs3',\n        '[attr.id]': 'this.id',\n        role: 'tooltip'\n      },\n      template: \"\\n    <div class=\\\"tooltip-arrow arrow\\\"></div>\\n    <div class=\\\"tooltip-inner\\\"><ng-content></ng-content></div>\\n    \",\n      styles: [\"\\n    :host.tooltip {\\n      display: block;\\n      pointer-events: none;\\n    }\\n    :host.bs3.tooltip.top>.arrow {\\n      margin-left: -2px;\\n    }\\n    :host.bs3.tooltip.bottom {\\n      margin-top: 0px;\\n    }\\n    :host.bs3.bs-tooltip-left, :host.bs3.bs-tooltip-right{\\n      margin: 0px;\\n    }\\n    :host.bs3.bs-tooltip-right .arrow, :host.bs3.bs-tooltip-left .arrow {\\n      margin: .3rem 0;\\n    }\\n  \"]\n    }]\n  }], function () {\n    return [{\n      type: TooltipConfig\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[tooltip], [tooltipHtml]',\n      exportAs: 'bs-tooltip'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc1.ComponentLoaderFactory\n    }, {\n      type: TooltipConfig\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc2.PositioningService\n    }];\n  }, {\n    tooltipChange: [{\n      type: Output\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    tooltipAnimation: [{\n      type: Input\n    }],\n    tooltipFadeDuration: [{\n      type: Input\n    }],\n    tooltipStateChanged: [{\n      type: Output\n    }],\n    onShown: [{\n      type: Output\n    }],\n    onHidden: [{\n      type: Output\n    }],\n    isOpen: [{\n      type: Input\n    }],\n    htmlContent: [{\n      type: Input,\n      args: ['tooltipHtml']\n    }],\n    tooltip: [{\n      type: Input\n    }],\n    _placement: [{\n      type: Input,\n      args: ['tooltipPlacement']\n    }],\n    placement: [{\n      type: Input\n    }],\n    _isOpen: [{\n      type: Input,\n      args: ['tooltipIsOpen']\n    }],\n    _enable: [{\n      type: Input,\n      args: ['tooltipEnable']\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    _appendToBody: [{\n      type: Input,\n      args: ['tooltipAppendToBody']\n    }],\n    container: [{\n      type: Input\n    }],\n    _popupClass: [{\n      type: Input,\n      args: ['tooltipClass']\n    }],\n    _tooltipContext: [{\n      type: Input,\n      args: ['tooltipContext']\n    }],\n    _tooltipPopupDelay: [{\n      type: Input,\n      args: ['tooltipPopupDelay']\n    }],\n    delay: [{\n      type: Input\n    }],\n    _tooltipTrigger: [{\n      type: Input,\n      args: ['tooltipTrigger']\n    }],\n    triggers: [{\n      type: Input\n    }],\n    adaptivePosition: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  TooltipDirective.prototype.tooltipId;\n  /**\n   * sets disable adaptive position\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.adaptivePosition;\n  /**\n   * Content to be displayed as tooltip.\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltip;\n  /**\n   * Fired when tooltip content changes\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipChange;\n  /**\n   * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.placement;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.triggers;\n  /**\n   * A selector specifying the element the tooltip should be appended to.\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.container;\n  /**\n   * Css class for tooltip container\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.containerClass;\n  /**\n   * Allows to disable tooltip\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.isDisabled;\n  /**\n   * Delay before showing the tooltip\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.delay;\n  /**\n   * Emits an event when the tooltip is shown\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.onShown;\n  /**\n   * Emits an event when the tooltip is hidden\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.onHidden;\n  /**\n   * @deprecated - removed, will be added to configuration\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipAnimation;\n  /**\n   * @deprecated\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipFadeDuration;\n  /**\n   * @deprecated\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipStateChanged;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  TooltipDirective.prototype._delayTimeoutId;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  TooltipDirective.prototype._tooltipCancelShowFn;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._tooltip;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._delaySubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._ariaDescribedby;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._positionService;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TooltipModule = /*#__PURE__*/function () {\n  function TooltipModule() {\n    _classCallCheck(this, TooltipModule);\n  }\n\n  _createClass(TooltipModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @return {?}\n     */\n    function forRoot() {\n      return {\n        ngModule: TooltipModule,\n        providers: [ComponentLoaderFactory, PositioningService]\n      };\n    }\n  }]);\n\n  return TooltipModule;\n}();\n\nTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TooltipModule_Factory(t) {\n    return new (t || TooltipModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TooltipModule, {\n    declarations: function declarations() {\n      return [TooltipDirective, TooltipContainerComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [TooltipDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [TooltipDirective, TooltipContainerComponent],\n      exports: [TooltipDirective],\n      entryComponents: [TooltipContainerComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { TooltipConfig, TooltipContainerComponent, TooltipDirective, TooltipModule };","map":{"version":3,"sources":["ngx-bootstrap/tooltip/tooltip.config.ts","ngx-bootstrap/tooltip/tooltip-container.component.ts","ngx-bootstrap/tooltip/tooltip.directive.ts","ngx-bootstrap/tooltip/tooltip.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAMa,a,6BAHb,yBAAA;AAAA;;AACE;AAAY;AAGX;AACD,OAAA,gBAAA,GAAmB,IAAnB;AACF;AAAY;AACE;;AAAZ,OAAA,SAAA,GAAY,KAAZ;AACF;AAAY;AACE;;AAAZ,OAAA,QAAA,GAAW,aAAX;AACF;AAAY;AAA4C;;AAGtD,OAAA,KAAA,GAAQ,CAAR;AACD,C;;8BAdA,qB,CAAU,C,EAAA;AAAA,SAAC,KAAA,CAAA,IAAA,aAAA,GAAD;AACG,C;AAAM;;;AACnB,aAAA,CAAA,KAAA,GAAA,kBAAA,CAAA;AAAA,EAAA,OAAA,EAAA,SAAA,qBAAA,GAAA;AAAA,WAAA,IAAA,aAAA,EAAA;AAAA,GAAA;AAAA,EAAA,KAAA,EAAA,aAAA;AAAA,EAAA,UAAA,EAAA;AAAA,CAAA,CAAA;;AAKS,IAAA,KAAA,EAAA;AACR;AAAQ;AAAsC;AAC5C;AAJF,EAAA,aAAA,CAAA,SAAA,CAAA,gBAAA;AACF;AAAQ;AACF;AACJ;;AADA,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA;AACF;AAAQ;AACF;AAAiB;;AAArB,EAAA,aAAA,CAAA,SAAA,CAAA,QAAA;AACF;AAAQ;AACF;AACJ;;AADA,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA;AACF;AAAQ;AACF;AAEE;;AAFN,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA;AACF;AACC;AAAI;AAAkC;AAAqH;;;IC2B/I,yB;AAA4B;AAAQ;AACzC;AAUN,qCAAY,MAAZ,EAAiC;AAAA;;AAC/B,IAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,MAApB;AACD;AACH;AACO;AAAmB;;;;;SARxB,eAAS;AACP,aAAO,KAAK,EAAZ;AACD;AACH;AACO;AAAmB;;;;WAIxB,2BAAe;AACb,WAAK,QAAL,GAAgB;AAAE,QAAA,EAAE,EAAE,KAAN;AAAa,QAAA,IAAI,EAAE;AAAnB,OAAhB;AACA,WAAK,QAAL,CAAc,KAAK,SAAnB,IAAgC,IAAhC;AACA,WAAK,QAAL,mBAAyB,KAAK,SAA9B,KAA6C,IAA7C;AAEA,WAAK,QAAL,CAAc,EAAd,GAAmB,IAAnB;;AACA,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,QAAL,CAAc,IAAd,GAAqB,IAArB;AACD;;AAED,UAAI,KAAK,cAAT,EAAyB;AACvB,aAAK,QAAL,CAAc,KAAK,cAAnB,IAAqC,IAArC;AACD;AACF;;;;;;0CAjEF,iC,CAAU,C,EAAA;AAAA,SAAA,KACT,CAAA,IAAQ,yBADC,EACuB,MAAA,CAAA,iBAAA,CAChC,aADgC,CADvB,CAAA;AAEQ,C;;AAAuB,yBAAO,CAAA,IAAP,GAAO,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAAA,yBAAA;AAEzC,EAAA,SAAA,EAAA,CAAA,CACJ,sBADI,CAAA,CAFyC;AAI3C,EAAA,SAAA,EAAA,CAAA,MAAA,EAAA,SAAA,CAJ2C;AAI3C,EAAA,QAAA,EAAA,CAJ2C;AAI3C,EAAA,YAAA,EAAA,SAAA,sCAAA,CAA8G,EAA9G,EAA8G,GAA9G,EAA8G;AAChH,QAAA,EAAA,GAAA,CAAA,EAAA;AAAgB,MAAA,MAAQ,CAAA,WAAR,CAAQ,IAAR,EAChB,GAAA,CAAA,EADgB;AACD,MAAA,MAAO,CAAA,UAAP,CAAO,wBACT,GAAA,CAAA,SADS,GACA,GADA,GACA,aADA,GAEhB,GAAA,CAAS,SAFO,GAEP,GAFO,GAGvB,GAAA,CAAA,SAHuB,GAGvB,GAHuB,GAwBxB,GAAA,CAAQ,cAxBS;;;GAN8B;sBAiC5C,GAjC4C;AAiC5C,EAAA,KAAA,EAAA,CAjC4C;AAiC5C,EAAA,IAAA,EAAA,CAjC4C;AAiC5C,EAAA,MAtBD,EAAA,CAAA,CAAA,CAAA,EAAA,eAAA,EAAA,OAAA,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,CAX6C;AAW7C,EAAA,QAAA,EAAA,SAAA,kCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;GAX6C;WA4B9C,6hB,CA5B8C;AAkChD,EAAA,eAAA,EAAA;AAlCgD,CAAA,CAAP;AAmCrC;;AAAmB,yBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CACf;AAAA,IAAA,IAAA,EAzCA;AAyCA,GADe,CAAA;AAAA,CAAA;;AAxCI,IAAA,KAAA,EAAA;AAAa;AAyCvC,EAAA,yBAAA,CAAA,SAAA,CAAA,QAAA;AACF;;AAAE,EAAA,yBAAA,CAAA,SAAA,CAAA,SAAA;AACF;;AAAE,EAAA,yBAAA,CAAA,SAAA,CAAA,cAAA;AACF;;AAAE,EAAA,yBAAA,CAAA,SAAA,CAAA,SAAA;AACF;;AAAE,EAAA,yBAAA,CAAA,SAAA,CAAA,EAAA;AACF;AACE;AAAI;AACS;AAQb;;AAAI;;;AAAiB,ICtCnB,EAAE,GAAG,CDsCc;;IChCV,gB;AAAmB;AAAQ;AACzB;AACE;AACf;AAA8B;AAEhB;AAEZ;AA2KF,4BACE,iBADF,EAEE,GAFF,EAGE,MAHF,EAIU,WAJV,EAKU,SALV,EAMU,gBANV,EAM8C;AAAA;;AAFpC,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AAvLV,SAAA,SAAA,GAAY,EAAE,EAAd;AACF;AAAY;AACM;;AAAY;;AAW5B,SAAA,aAAA,GAAyD,IAAI,YAAJ,EAAzD;AACF;AAEK;AAA2C;;AAerC,SAAA,cAAA,GAAiB,EAAjB;AACX;AACM;AAEN;;AA6FW,SAAA,gBAAA,GAAmB,IAAnB;AACX;AACW;AAAuB;;AAqBvB,SAAA,mBAAA,GAAsB,GAAtB;AACX;AACW;AAAuB;;AAehC,SAAA,mBAAA,GAA6C,IAAI,YAAJ,EAA7C;AAkBE,SAAK,QAAL,GAAgB,GAAG,CAChB,YADa,CAEZ,KAAK,WAFO,EAGZ,iBAHY,EAIZ,KAAK,SAJO,EAMb,OANa,CAML;AAAC,MAAA,OAAO,EAAE,aAAV;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KANK,CAAhB;AAQA,IAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB,MAApB;AACA,SAAK,OAAL,GAAe,KAAK,QAAL,CAAc,OAA7B;AACA,SAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,QAA9B;AACD;AACH;AACO;AAEmB;AACZ;;;;;SAvKZ,eACU;AACR,aAAO,KAAK,QAAL,CAAc,OAArB;AACD;AACH;AACO;AACP;AACE;;SAFA,aAAW,KAAX,EAAyB;AACvB,UAAI,KAAJ,EAAW;AACT,aAAK,IAAL;AACD,OAFD,MAEO;AACL,aAAK,IAAL;AACD;AACF;AACH;AAEC;AAEa;AAET;AACa;;;;SAgBhB,aAEgB,KAFhB,EAEgD;AAC9C,MAAA,QAAQ,CAAC,0DAAD,CAAR;AACA,WAAK,OAAL,GAAe,KAAf;AACD;AACH;AACO;AACF;AACL;AAAmB;;;;SADjB,aACe,KADf,EAC4B;AAC1B,MAAA,QAAQ,CAAC,iEAAD,CAAR;AACA,WAAK,SAAL,GAAiB,KAAjB;AACD;AACH;AACO;AACF;AACF;AAAmB;;;;;AAItB;AACO;AAAmB;AAAxB,mBAAW;AACT,MAAA,QAAQ,CAAC,2DAAD,CAAR;AAEA,aAAO,KAAK,MAAZ;AACD;AACH;AACO;AACF;AACF;AAAmB;;SAdpB,aACY,KADZ,EAC0B;AACxB,MAAA,QAAQ,CAAC,2DAAD,CAAR;AACA,WAAK,MAAL,GAAc,KAAd;AACD;;;;AAcH;AACO;AAAmB;AAAxB,mBAAW;AACT,MAAA,QAAQ,CAAC,+DAAD,CAAR;AAEA,aAAO,KAAK,UAAZ;AACD;AACH;AACO;AACF;AAAwB;AACb;;SAdd,aACY,KADZ,EAC0B;AACxB,MAAA,QAAQ,CAAC,+DAAD,CAAR;AACA,WAAK,UAAL,GAAkB,CAAC,KAAnB;AACD;;;;AAgBH;AACO;AAAmB;AAAxB,mBAAiB;AACf,MAAA,QAAQ,CACN,2EADM,CAAR;AAIA,aAAO,KAAK,SAAL,KAAmB,MAA1B;AACD;AACH;AACO;AAAoD;AACvC;AAElB;;SAnBA,aACkB,KADlB,EACgC;AAC9B,MAAA,QAAQ,CACN,2EADM,CAAR;AAGA,WAAK,SAAL,GAAiB,KAAK,GAAG,MAAH,GAAY,KAAK,SAAvC;AACD;;;SAcD,aACgB,KADhB,EAC6B;AAC3B,MAAA,QAAQ,CAAC,yBAAD,CAAR;AACD;AACH;AACO;AACF;AACH;AAAmB;;;;SADnB,aAEoB,KAFpB,EAE8B;AAC5B,MAAA,QAAQ,CAAC,2BAAD,CAAR;AACD;AACH;AACO;AACF;AAAwB;AACX;;;;SADhB,aACuB,KADvB,EACoC;AAClC,MAAA,QAAQ,CAAC,sDAAD,CAAR;AACA,WAAK,KAAL,GAAa,KAAb;AACD;AACH;AACO;AAEP;AACkB;;;;SAChB,eACmB;AACjB,MAAA,QAAQ,CAAC,8DAAD,CAAR;AAEA,aAAO,KAAK,QAAZ;AACD;AACH;AACO;AAAwB;AAC/B;;SADE,aAAoB,KAApB,EAA4C;AAC1C,MAAA,QAAQ,CAAC,8DAAD,CAAR;AACA,WAAK,QAAL,GAAgB,CAAC,KAAK,IAAI,EAAV,EAAc,QAAd,EAAhB;AACD;AACH;AACO;AACF;;;;WAgCH,oBAAQ;AAAA;;AACN,WAAK,QAAL,CAAc,MAAd,CAAqB;AACnB,QAAA,QAAQ,EAAE,KAAK,QADI;AAEnB,QAAA,IAAI;AAAA;AAAO;AAEX;AAFM;AAAA,iBAAM,KAAI,CAAC,IAAL,EAAN;AAAA;AAFa,OAArB;AAIJ;;;AACI,WAAK,aAAL,CAAmB,SAAnB;AAA4B;AAAM;AACvB;AACG;AAFe,gBAAC,KAAD,EAAW;AACtC,YAAI,CAAC,KAAL,EAAY;AACV,UAAA,KAAI,CAAC,QAAL,CAAc,IAAd;AACD;AACF,OAJD;AAMA,WAAK,OAAL,CAAa,SAAb;AAAsB;AAAM;AACZ;AADO,kBAAA;AACrB,QAAA,KAAI,CAAC,kBAAL;AACD,OAFD;AAIA,WAAK,QAAL,CAAc,SAAd;AAAuB;AAAM;AACb;AADQ,kBAAA;AACtB,QAAA,KAAI,CAAC,kBAAL;AACD,OAFD;AAGD;AACH;AACO;AAAmB;;;;WAAxB,8BAAkB;AAChB,WAAK,gBAAL,GAAwB,KAAK,MAAL,qBAAyB,KAAK,SAA9B,IAA4C,IAApE;;AAEA,UAAI,KAAK,gBAAT,EAA2B;AACzB,aAAK,SAAL,CAAe,YAAf,CAA4B,KAAK,WAAL,CAAiB,aAA7C,EAA4D,kBAA5D,EAAgF,KAAK,gBAArF;AACD,OAFD,MAEO;AACL,aAAK,SAAL,CAAe,eAAf,CAA+B,KAAK,WAAL,CAAiB,aAAhD,EAA+D,kBAA/D;AACD;AACF;AACH;AAEC;AACE;AACE;AACa;;;;WAAhB,kBAAM;AACJ,UAAI,KAAK,MAAT,EAAiB;AACf,eAAO,KAAK,IAAL,EAAP;AACD;;AAED,WAAK,IAAL;AACD;AACH;AAEC;AACE;AACE;AAEJ;;;;WADC,gBAAI;AAAA;;AACF,WAAK,gBAAL,CAAsB,UAAtB,CAAiC;AAC/B,QAAA,SAAS,EAAE;AACT,UAAA,IAAI,EAAE;AACJ,YAAA,OAAO,EAAE,KAAK;AADV,WADG;AAIT,UAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE,KAAK;AADC;AAJR;AADoB,OAAjC;;AAWA,UACE,KAAK,MAAL,IACA,KAAK,UADL,IAEA,KAAK,eAFL,IAGA,CAAC,KAAK,OAJR,EAKE;AACA;AACD;AACL;;;AACwB,UAAd,WAAW;AAAA;AAAQ;AACT;AADI,eAAd,WAAc,GAAA;AAClB,YAAI,MAAI,CAAC,eAAT,EAA0B;AACxB,UAAA,MAAI,CAAC,eAAL,GAAuB,SAAvB;AACD;;AAED,QAAA,MAAI,CAAC,QAAL,CACG,MADH,CACU,yBADV,EAEG,EAFH,CAEM,MAAI,CAAC,SAFX,EAGG,QAHH,CAGY;AAAC,UAAA,UAAU,EAAE,MAAI,CAAC;AAAlB,SAHZ,EAIG,IAJH,CAIQ;AACJ,UAAA,OAAO,EAAE,MAAI,CAAC,OADV;AAEJ,UAAA,SAAS,EAAE,MAAI,CAAC,SAFZ;AAGJ,UAAA,cAAc,EAAE,MAAI,CAAC,cAHjB;AAIJ,UAAA,EAAE,oBAAa,MAAI,CAAC,SAAlB;AAJE,SAJR;AAUD,OAfmB;AAgBxB;;;AAAyB,UAAf,2BAA2B;AAAA;AAAQ;AACzB;AADoB,eAA9B,2BAA8B,GAAA;AAClC,YAAI,MAAI,CAAC,oBAAT,EAA+B;AAC7B,UAAA,MAAI,CAAC,oBAAL;AACD;AACF,OAJoB;;AAMrB,UAAI,KAAK,KAAT,EAAgB;AACd,YAAI,KAAK,kBAAT,EAA6B;AAC3B,eAAK,kBAAL,CAAwB,WAAxB;AACD;;AAED,aAAK,kBAAL,GAA0B,KAAK,CAAC,KAAK,KAAN,CAAL,CAAkB,SAAlB;AAA2B;AAAM;AAEhE;AAF2D,oBAAA;AACpD,UAAA,WAAW;AACX,UAAA,2BAA2B;AAC5B,SAHyB,CAA1B;;AAKA,YAAI,KAAK,QAAT,EAAmB;AACjB,UAAA,aAAa,CAAC,KAAK,QAAN,CAAb,CACG,OADH;AACU;AAAM;AACL;AAA+B;AAD/B,oBAAC,OAAD,EAAiB;AACxB,YAAA,MAAI,CAAC,oBAAL,GAA4B,MAAI,CAAC,SAAL,CAAe,MAAf,CAC1B,MAAI,CAAC,WAAL,CAAiB,aADS,EAE1B,OAAO,CAAC,KAFkB;AAEb;AACtB;AACa;AADJ,wBAAA;AACE,cAAA,MAAI,CAAC,kBAAL,CAAwB,WAAxB;;AACA,cAAA,2BAA2B;AAC5B,aANyB,CAA5B;AAQD,WAVH;AAWD;AACF,OAvBD,MAuBO;AACL,QAAA,WAAW;AACZ;AACF;AACH;AAEC;AACE;AACE;AAEJ;;;;WADC,gBAAI;AAAA;;AACF,UAAI,KAAK,eAAT,EAA0B;AACxB,QAAA,YAAY,CAAC,KAAK,eAAN,CAAZ;AACA,aAAK,eAAL,GAAuB,SAAvB;AACD;;AAED,UAAI,CAAC,KAAK,QAAL,CAAc,OAAnB,EAA4B;AAC1B;AACD;;AAED,WAAK,QAAL,CAAc,QAAd,CAAuB,QAAvB,CAAgC,EAAhC,GAAqC,KAArC;AACA,MAAA,UAAU;AAAA;AAAM;AACA;AADL,kBAAA;AACT,QAAA,MAAI,CAAC,QAAL,CAAc,IAAd;AACD,OAFS,EAEP,KAAK,mBAFE,CAAV;AAGD;AACH;AACO;AACL;;;;WADA,uBAAW;AACT,WAAK,QAAL,CAAc,OAAd;;AACA,WAAK,aAAL,CAAmB,WAAnB;;AACA,UAAI,KAAK,kBAAT,EAA6B;AAC3B,aAAK,kBAAL,CAAwB,WAAxB;AACD;;AACD,WAAK,OAAL,CAAa,WAAb;AACA,WAAK,QAAL,CAAc,WAAd;AACD;;;;;;iCA9VF,wB,CAAS,C,EAAA;AAAC,SAAA,KAAA,CAAA,IACT,gBADS,EACC,MAAA,CAAA,iBAAA,CAA0B,MAAA,CAAA,gBAA1B,CADD,EAEC,MAAA,CAAY,iBAAZ,CACX,MAAA,CAAA,sBADW,CAFD,EAGV,MAAA,CAAA,iBAAA,CAAA,aAAA,CAHU,EAGV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAHU,EAGV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,SAAA,CAHU,EAGV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,kBAAA,CAHU,CAAA;AAGV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aACI,Y;;AAAC;;AAAmB,gBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CACnB;AAAA,IAAA,IAAA,EAnBJ;AAmBI,GADmB,EAjBtB;AAAA,IAAA,IAAA,EAKuB;AALvB,GAiBsB,EAZ2B;AAAA,IAAA,IAAA,EAF3C;AAE2C,GAY3B,EAdC;AAAA,IAAA,IAAA,EAZxB;AAYwB,GAcD,EAzBvB;AAAA,IAAA,IAAA,EAKA;AALA,GAyBuB,EAnBvB;AAAA,IAAA,IAAA,EASO;AATP,GAmBuB,CAAA;AAAA,CAAA;;AAVQ,gBAAA,CAAA,cAAA,GAAA;AAE7B,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAWD;AAXC,GAAA,CAF6B;AAapB,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAKV;AALU,GAAA,CAboB;AAmB/B,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAGC;AAHD,GAAA,CAnB+B;AAuB/B,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAMC;AAND,GAAA,CAvB+B;AA6BpB,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAKV;AALU,GAAA,CA7BoB;AAkCpB,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAIV;AAJU,GAAA,CAlCoB;AAsCpB,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAIV;AAJU,GAAA,CAtCoB;AA0CpB,EAAA,MAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAIV;AAJU,GAAA,CA1CoB;AA+C/B,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAeC;AAfD,GAAA,CA/C+B;AA8DpB,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAKV;AALU,GAAA,CA9DoB;AAmEpB,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAMV;AANU,GAAA,CAnEoB;AAyEnB,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAKX;AALW,GAAA,CAzEmB;AA8EnB,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAGX,KAHW;AAGN,IAAA,IAAA,EAAA,CAAC,aAAD;AAHM,GAAA,CA9EmB;AAkF5B,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAOF,KAPE;AAOG,IAAA,IAAA,EAAA,CAAC,kBAAD;AAPH,GAAA,CAlF4B;AA0F5B,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAMF,KANE;AAMG,IAAA,IAAA,EAAA,CAAC,eAAD;AANH,GAAA,CA1F4B;AAiG5B,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAYF,KAZE;AAYG,IAAA,IAAA,EAAA,CAAC,eAAD;AAZH,GAAA,CAjG4B;AA8G5B,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAYF,KAZE;AAYG,IAAA,IAAA,EAAA,CAAC,qBAAD;AAZH,GAAA,CA9G4B;AA2H5B,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAgBF;AAhBE,GAAA,CA3H4B;AA2IpB,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAGV,KAHU;AAGL,IAAA,IAAA,EAAA,CAAC,cAAD;AAHK,GAAA,CA3IoB;AA+I5B,EAAA,eAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAKF,KALE;AAKG,IAAA,IAAA,EAAA,CAAC,gBAAD;AALH,GAAA,CA/I4B;AAqJ5B,EAAA,kBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAMF,KANE;AAMG,IAAA,IAAA,EAAA,CAAC,mBAAD;AANH,GAAA,CArJ4B;AA4J5B,EAAA,mBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAMF;AANE,GAAA,CA5J4B;AAkKpB,EAAA,eAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAGV,KAHU;AAGL,IAAA,IAAA,EAAA,CAAC,gBAAD;AAHK,GAAA,CAlKoB;AAsK5B,EAAA,mBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAYF;AAZE,GAAA;AAtK4B,CAAA;;AAoB/B,UAAA,CAAA,CAHC,QAAQ,EAGT,EAFD,UAAA,CAAA,aAAA,EAAA,MAAA,CAEC,CAAA,EAD0B,gBAAA,CAAA,SAC1B,EAD0B,SAC1B,EAD0B,KAAA,CAC1B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACF,C;;AAAC,IAAA,KAAA,EAAA;AAAa;AAVZ,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA;AACF;AAAQ;AACF;AAAiB;;AAArB,EAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA;AACF;AACE;AACE;AAEH;;AADC,EAAA,gBAAA,CAAA,SAAA,CAAA,OAAA;AAIF;AAAQ;AACF;AACK;;AADT,EAAA,gBAAA,CAAA,SAAA,CAAA,aAAA;AAGF;AAEC;AACE;AACW;;AAAZ,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA;AACF;AACE;AACE;AAEJ;AAAiB;;AAAf,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA;AACF;AACE;AACE;AACW;;AAAb,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA;AACF;AACE;AACE;AACW;;AAAb,EAAA,gBAAA,CAAA,SAAA,CAAA,cAAA;AACF;AACE;AAAiC;AAAiB;;AAkBlD,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA;AACF;AAEC;AACE;AACW;;AAAZ,EAAA,gBAAA,CAAA,SAAA,CAAA,KAAA;AACF;AAEC;AACE;AACW;;AACZ,EAAA,gBAAA,CAAA,SAAA,CAAA,OAAA;AACF;AACE;AACE;AACW;;AACb,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA;AACF;AACO;AACS;AACP;;AAyDP,EAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA;AACF;AACO;AAAmB;AAAiB;;AAqBzC,EAAA,gBAAA,CAAA,SAAA,CAAA,mBAAA;AACF;AACO;AAAmB;AAAiB;;AAczC,EAAA,gBAAA,CAAA,SAAA,CAAA,mBAAA;AAEF;AACO;AAAiB;AACtB;;AAAA,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA;AACF;AAAQ;AAAiB;AAAkB;;AAAzC,EAAA,gBAAA,CAAA,SAAA,CAAA,oBAAA;AACF;AACO;AAAiB;AAAgB;;AAAtC,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA;AACF;AAAQ;AAAiB;AAAgB;;AAAvC,EAAA,gBAAA,CAAA,SAAA,CAAA,kBAAA;AACF;AAAQ;AAAiB;AACpB;;AADH,EAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA;AACF;AAAQ;AACE;AAAgB;;AAGtB,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA;AAAgC;AAC7B;AAAiB;AAClB;;AADF,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA;AAA6B;AAC1B;AAAiB;AAAgB;;AAApC,EAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA;AACJ;AAAG;AAEH;AACU;AAIP;;;IChNU,a;;;;;;;;AACb;AAAQ;AAAmB;AAAzB,uBAAc;AACZ,aAAO;AACL,QAAA,QAAQ,EAAE,aADL;AAEL,QAAA,SAAS,EAAE,CAAC,sBAAD,EAAyB,kBAAzB;AAFN,OAAP;AAID;;;;;;4BAZF,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,aAAO,CAAE,IAAT,GAAU,MAAY,CAAC,gBAAb,CAAa;AACvB,EAAA,OAAA,EAAA,SAAe,qBAAf,CAAiC,CAAjC,EAAiC;AAAA,WAAA,KAAyB,CAAC,IAAA,aAA1B,GAAA;AACjC,GAFuB;AAEhB,EAAA,OAAG,EAAA,CAAA,CAAA,YAAA,CAAA;AAFa,CAAb,CAAV;;CAGA,YAAA;AAAA,GAAA,OAAe,SAAf,KAAkB,WAAlB,IAA4C,SAA5C,KACD,MAAA,CAAA,kBAAA,CAAA,aAAA,EAAA;AAAA,IAAA,YAAA,EAAA,wBAAA;AAAA,aAAA,CAAA,gBAAA,EAAA,yBAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,YAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,gBAAA,CAAA;AAAA;AAAA,GAAA,CADC;AACD,C;;;;;;;;;;;;;;AACI,C;AAAE;AAAI;AACK;AAGgB;;AAAK;AAAI;AAIzC;AAAqH;;;AAAK,SAAA,aAAA,EAAA,yBAAA,EAAA,gBAAA,EAAA,aAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n/** Default values provider for tooltip */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TooltipConfig {\n  /** sets disable adaptive position */\n  adaptivePosition = true;\n  /** tooltip placement, supported positions: 'top', 'bottom', 'left', 'right' */\n  placement = 'top';\n  /** array of event names which triggers tooltip opening */\n  triggers = 'hover focus';\n  /** a selector specifying the element the tooltip should be appended to. */\n  container: string;\n  /** delay before showing the tooltip */\n  delay = 0;\n}\n","import {\n  AfterViewInit,\n  Component,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { TooltipConfig } from './tooltip.config';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n@Component({\n  selector: 'bs-tooltip-container',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line\n  host: {\n    '[class]':\n      '\"tooltip in tooltip-\" + placement + \" \" + \"bs-tooltip-\" + placement + \" \" + placement + \" \" + containerClass',\n    '[class.show]': '!isBs3',\n    '[class.bs3]': 'isBs3',\n    '[attr.id]': 'this.id',\n    role: 'tooltip'\n  },\n  styles: [\n    `\n    :host.tooltip {\n      display: block;\n      pointer-events: none;\n    }\n    :host.bs3.tooltip.top>.arrow {\n      margin-left: -2px;\n    }\n    :host.bs3.tooltip.bottom {\n      margin-top: 0px;\n    }\n    :host.bs3.bs-tooltip-left, :host.bs3.bs-tooltip-right{\n      margin: 0px;\n    }\n    :host.bs3.bs-tooltip-right .arrow, :host.bs3.bs-tooltip-left .arrow {\n      margin: .3rem 0;\n    }\n  `\n  ],\n  template: `\n    <div class=\"tooltip-arrow arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    `\n})\nexport class TooltipContainerComponent implements AfterViewInit {\n  classMap: { [key: string]: boolean };\n  placement: string;\n  containerClass: string;\n  animation: boolean;\n  id: string;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  constructor(config: TooltipConfig) {\n    Object.assign(this, config);\n  }\n\n  ngAfterViewInit(): void {\n    this.classMap = { in: false, fade: false };\n    this.classMap[this.placement] = true;\n    this.classMap[`tooltip-${this.placement}`] = true;\n\n    this.classMap.in = true;\n    if (this.animation) {\n      this.classMap.fade = true;\n    }\n\n    if (this.containerClass) {\n      this.classMap[this.containerClass] = true;\n    }\n  }\n}\n","/* tslint:disable: max-file-line-count deprecation */\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { TooltipContainerComponent } from './tooltip-container.component';\nimport { TooltipConfig } from './tooltip.config';\n\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { OnChange, warnOnce, parseTriggers, Trigger } from 'ngx-bootstrap/utils';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n\nimport { timer, Subscription } from 'rxjs';\n\nlet id = 0;\n\n@Directive({\n  selector: '[tooltip], [tooltipHtml]',\n  exportAs: 'bs-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnDestroy {\n  tooltipId = id++;\n  /** sets disable adaptive position */\n  @Input() adaptivePosition: boolean;\n  /**\n   * Content to be displayed as tooltip.\n   */\n  @OnChange()\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  tooltip: string | TemplateRef<any>;\n  /** Fired when tooltip content changes */\n  @Output()\n  /* tslint:disable-next-line:no-any */\n  tooltipChange: EventEmitter<string | TemplateRef<any>> = new EventEmitter();\n\n  /**\n   * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement: string;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() triggers: string;\n  /**\n   * A selector specifying the element the tooltip should be appended to.\n   */\n  @Input() container: string;\n  /**\n   * Css class for tooltip container\n   */\n  @Input() containerClass = '';\n  /**\n   * Returns whether or not the tooltip is currently being shown\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._tooltip.isShown;\n  }\n\n  set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Allows to disable tooltip\n   */\n  @Input() isDisabled: boolean;\n\n  /**\n   * Delay before showing the tooltip\n   */\n  @Input() delay: number;\n\n  /**\n   * Emits an event when the tooltip is shown\n   */\n  /* tslint:disable-next-line:no-any */\n  @Output() onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the tooltip is hidden\n   */\n  /* tslint:disable-next-line:no-any */\n  @Output() onHidden: EventEmitter<any>;\n\n  /** @deprecated - please use `tooltip` instead */\n  @Input('tooltipHtml')\n  /* tslint:disable-next-line:no-any */\n  set htmlContent(value: string | TemplateRef<any>) {\n    warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');\n    this.tooltip = value;\n  }\n\n  /** @deprecated - please use `placement` instead */\n  @Input('tooltipPlacement')\n  set _placement(value: string) {\n    warnOnce('tooltipPlacement was deprecated, please use `placement` instead');\n    this.placement = value;\n  }\n\n  /** @deprecated - please use `isOpen` instead */\n  @Input('tooltipIsOpen')\n  set _isOpen(value: boolean) {\n    warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n    this.isOpen = value;\n  }\n\n  get _isOpen(): boolean {\n    warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n\n    return this.isOpen;\n  }\n\n  /** @deprecated - please use `isDisabled` instead */\n  @Input('tooltipEnable')\n  set _enable(value: boolean) {\n    warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n    this.isDisabled = !value;\n  }\n\n  get _enable(): boolean {\n    warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n\n    return this.isDisabled;\n  }\n\n  /** @deprecated - please use `container=\"body\"` instead */\n  @Input('tooltipAppendToBody')\n  set _appendToBody(value: boolean) {\n    warnOnce(\n      'tooltipAppendToBody was deprecated, please use `container=\"body\"` instead'\n    );\n    this.container = value ? 'body' : this.container;\n  }\n\n  get _appendToBody(): boolean {\n    warnOnce(\n      'tooltipAppendToBody was deprecated, please use `container=\"body\"` instead'\n    );\n\n    return this.container === 'body';\n  }\n\n  /** @deprecated - removed, will be added to configuration */\n  @Input() tooltipAnimation = true;\n\n  /** @deprecated - will replaced with customClass */\n  @Input('tooltipClass')\n  set _popupClass(value: string) {\n    warnOnce('tooltipClass deprecated');\n  }\n\n  /** @deprecated - removed */\n  @Input('tooltipContext')\n  /* tslint:disable-next-line:no-any */\n  set _tooltipContext(value: any) {\n    warnOnce('tooltipContext deprecated');\n  }\n\n  /** @deprecated */\n  @Input('tooltipPopupDelay')\n  set _tooltipPopupDelay(value: number) {\n    warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');\n    this.delay = value;\n  }\n\n  /** @deprecated */\n  @Input() tooltipFadeDuration = 150;\n\n  /** @deprecated -  please use `triggers` instead */\n  @Input('tooltipTrigger')\n  get _tooltipTrigger(): string | string[] {\n    warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n\n    return this.triggers;\n  }\n\n  set _tooltipTrigger(value: string | string[]) {\n    warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n    this.triggers = (value || '').toString();\n  }\n\n  /** @deprecated */\n  @Output()\n  tooltipStateChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /* tslint:disable-next-line:no-any */\n  protected _delayTimeoutId: number | any;\n  protected _tooltipCancelShowFn: Function;\n\n  private _tooltip: ComponentLoader<TooltipContainerComponent>;\n  private _delaySubscription: Subscription;\n  private _ariaDescribedby: string;\n  constructor(\n    _viewContainerRef: ViewContainerRef,\n    cis: ComponentLoaderFactory,\n    config: TooltipConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    private _positionService: PositioningService\n  ) {\n\n    this._tooltip = cis\n      .createLoader<TooltipContainerComponent>(\n        this._elementRef,\n        _viewContainerRef,\n        this._renderer\n      )\n      .provide({provide: TooltipConfig, useValue: config});\n\n    Object.assign(this, config);\n    this.onShown = this._tooltip.onShown;\n    this.onHidden = this._tooltip.onHidden;\n  }\n\n  ngOnInit(): void {\n    this._tooltip.listen({\n      triggers: this.triggers,\n      show: () => this.show()\n    });\n    /* tslint:disable-next-line:no-any */\n    this.tooltipChange.subscribe((value: any) => {\n      if (!value) {\n        this._tooltip.hide();\n      }\n    });\n\n    this.onShown.subscribe(() => {\n      this.setAriaDescribedBy();\n    });\n\n    this.onHidden.subscribe(() => {\n      this.setAriaDescribedBy();\n    });\n  }\n\n  setAriaDescribedBy(): void {\n    this._ariaDescribedby = this.isOpen ? `tooltip-${this.tooltipId}` : null;\n\n    if (this._ariaDescribedby) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ariaDescribedby);\n    } else {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n    }\n  }\n\n  /**\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  /**\n   * Opens an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  show(): void {\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this.adaptivePosition\n        },\n        preventOverflow: {\n          enabled: this.adaptivePosition\n        }\n      }\n    });\n\n    if (\n      this.isOpen ||\n      this.isDisabled ||\n      this._delayTimeoutId ||\n      !this.tooltip\n    ) {\n      return;\n    }\n\n    const showTooltip = () => {\n      if (this._delayTimeoutId) {\n        this._delayTimeoutId = undefined;\n      }\n\n      this._tooltip\n        .attach(TooltipContainerComponent)\n        .to(this.container)\n        .position({attachment: this.placement})\n        .show({\n          content: this.tooltip,\n          placement: this.placement,\n          containerClass: this.containerClass,\n          id: `tooltip-${this.tooltipId}`\n        });\n    };\n    const cancelDelayedTooltipShowing = () => {\n      if (this._tooltipCancelShowFn) {\n        this._tooltipCancelShowFn();\n      }\n    };\n\n    if (this.delay) {\n      if (this._delaySubscription) {\n        this._delaySubscription.unsubscribe();\n      }\n\n      this._delaySubscription = timer(this.delay).subscribe(() => {\n        showTooltip();\n        cancelDelayedTooltipShowing();\n      });\n\n      if (this.triggers) {\n        parseTriggers(this.triggers)\n          .forEach((trigger: Trigger) => {\n            this._tooltipCancelShowFn = this._renderer.listen(\n              this._elementRef.nativeElement,\n              trigger.close,\n              () => {\n                this._delaySubscription.unsubscribe();\n                cancelDelayedTooltipShowing();\n              }\n            );\n          });\n      }\n    } else {\n      showTooltip();\n    }\n  }\n\n  /**\n   * Closes an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  hide(): void {\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n\n    if (!this._tooltip.isShown) {\n      return;\n    }\n\n    this._tooltip.instance.classMap.in = false;\n    setTimeout(() => {\n      this._tooltip.hide();\n    }, this.tooltipFadeDuration);\n  }\n\n  ngOnDestroy(): void {\n    this._tooltip.dispose();\n    this.tooltipChange.unsubscribe();\n    if (this._delaySubscription) {\n      this._delaySubscription.unsubscribe();\n    }\n    this.onShown.unsubscribe();\n    this.onHidden.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { TooltipContainerComponent } from './tooltip-container.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TooltipDirective, TooltipContainerComponent],\n  exports: [TooltipDirective],\n  entryComponents: [TooltipContainerComponent]\n})\nexport class TooltipModule {\n  static forRoot(): ModuleWithProviders<TooltipModule> {\n    return {\n      ngModule: TooltipModule,\n      providers: [ComponentLoaderFactory, PositioningService]\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}